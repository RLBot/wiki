{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>RLBot v5 is in beta!</p> <p>Learn more about v5 in the RLBot v5 Overview and start converting your bot today!</p> <p>Welcome to the RLBot wiki! RLBot is a framework for creating offline Rocket League bots. The framework uses an official Psyonix API making our bots safe to play with and against. This wiki primarily houses resources for bot development, but you can also find guides for users, framework documentation, and community insights.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Download RLBot</li> <li>Botmaking Setup Guides</li> </ul>"},{"location":"#video-tutorials","title":"Video tutorials","text":"<ul> <li>Setup/Python/GoslingUtils Tutorials by GooseFairy</li> <li>C#/RedUtils tutorial by CodeRed</li> <li>Java tutorial by Eastvillage</li> <li>Python/VirxERLU Tutorials by VirxEC</li> <li>Python video tutorials from Learn Code By Gaming</li> <li>Language agnostic tutorial explaining useful concepts by b2studios</li> </ul>"},{"location":"#language-specific-wikis","title":"Language-specific wikis","text":"<ul> <li>Officially supported languages</li> <li>Other community supported languages</li> <li>Machine Learning FAQ</li> <li>RLGym</li> </ul>"},{"location":"#text-tutorials","title":"Text tutorials","text":"<ul> <li>Shooting the ball towards or away from a target</li> <li>Dodges (C#)</li> <li>State systems (C#)</li> </ul>"},{"location":"#commonly-used-resources","title":"Commonly Used Resources","text":"<ul> <li>GameTickPacket, FieldInfo, and Controllers</li> <li>Useful Game Values (Field Size, Boost Pad Locations, and more)</li> <li>Quickchats</li> <li>Rendering</li> <li>Dropshot and Related Information</li> <li>Appearance Customization</li> <li>Ball Prediction</li> <li>The RLBotPack</li> <li>Team Match Communication Protocol (TMCP)</li> <li>Troubleshooting</li> </ul>"},{"location":"#physics","title":"Physics","text":"<ul> <li>RocketSim by Zealan</li> <li>Ball Physics by @Chip</li> <li>Ball Collision by @Chip</li> <li>Ground Car Control by @Chip</li> <li>Aerial Car Control by @Chip</li> <li>Inverse Aerial Car Control by @Chip</li> <li>Aerial ball intercept/hit by @Chip</li> <li>How Car and Ball Interact by @Chip</li> <li>How to Analyze Drivable Paths by @Chip</li> <li>The Physics Of Jumping by Impossibum</li> <li>Extracting Map Meshes by Virx</li> </ul>"},{"location":"#unofficial-but-helpful-code-repositories","title":"Unofficial but Helpful Code Repositories","text":"<ul> <li>Utilities by @Chip</li> <li>GoslingUtils by GooseFairy</li> <li>VirxERLU (aka GoslingUtils 2.0) by VirxEC</li> <li>Source code to East's Java Tutorial</li> <li>RedUtils by CodeRed</li> </ul>"},{"location":"botmaking/ball-path-prediction/","title":"Ball path prediction","text":"<p>When writing a bot, it's very useful to know where the ball will be a few seconds in the future. This is very challenging because the ball responds to gravity, drag, friction, spin, and bounces off of curvy walls. Fortunately, chip has your back. He did a meticulous study of the ball physics and built an extremely accurate model: https://samuelpmish.github.io/notes/RocketLeague/ball_bouncing/</p> <p>Note: this is just an estimate of what the ball will be doing in the future, it is not exact! It is recommended that you routinely update your predictions to have the most accurate estimates.</p> <p>The fruit of that labor is now available to your bot with a simple function! Just call the function and you get 6 seconds' worth of ball positions, each advancing 1/60 of a second into the future.</p>"},{"location":"botmaking/ball-path-prediction/#language-specific-examples","title":"Language-specific examples","text":"<p>(support for more languages coming soon):</p> <ul> <li>Python</li> <li>Java</li> <li>C#</li> </ul>"},{"location":"botmaking/bot-customization/","title":"Bot customization","text":""},{"location":"botmaking/bot-customization/#gui-customization","title":"GUI Customization","text":"<p>The easiest way to customize your bot appearance is via RLBotGUI. To bring up the appearance editor, click on the bot info icon and then click Edit Appearance.</p> <p></p> <p>Video guide</p> <p>You can use any item in the game, including painted items. The editor should have the latest items, but we have to manually update them. So if some recently added items are missing, please remind us on our discord. You can also click the bottom left buttons to preview your loadout in-game instantly!</p> <p>Tip: When previewing in-game and trying multiple loadouts, sometimes the camera will lose track of your car when it respawns. You can avoid this by cycling the camera with your mouse buttons instead of using the number keys. With this technique it should be possible to get into a camera mode like hard-attach and have it be stable as you look at different wheels, blue car vs orange car, etc.</p>"},{"location":"botmaking/bot-customization/#manual-customization","title":"Manual Customization","text":"<p>In your bot's config file you can set your bot's display name. You can have a name of max 31 characters. If your name is too long or there is duplicates that is handled in the framework.</p> <p>Example (<code>bot.cfg</code> file):</p> <pre><code>[Locations]\n# Path to loadout config. Can use relative path from here.\nlooks_config = ./appearance.cfg\n\n# Path to python file. Can use relative path from here.\npython_file = ./python_example.py\n\n# Path to a file that can dynamically generate your bot's appearance. Optional.\nloadout_generator = example_loadout_generator.py\n\n# Name of the bot in-game\nname = PythonExampleBot\n\n# Optional: Location of a logo file to to show in RLBotGUI and tournament overlays. 400x300px preferred.\nlogo_file = ./logo.png\n</code></pre> <p>The field <code>looks_config</code> should point to an appearance file. An <code>appearance.cfg</code> file could look like this:</p> <pre><code>[Bot Loadout]\nteam_color_id = 27\ncustom_color_id = 75\ncar_id = 23\ndecal_id = 307\nwheels_id = 1656\nboost_id = 0\nantenna_id = 287\nhat_id = 0\npaint_finish_id = 1978\ncustom_finish_id = 1978\nengine_audio_id = 0\ntrails_id = 0\ngoal_explosion_id = 1971\nprimary_color_lookup = [50, 0, 200]\nsecondary_color_lookup = [100, 100, 250]\n\n[Bot Loadout Orange]\n# Same as above, except it applies to the orange car\n</code></pre>"},{"location":"botmaking/bot-customization/#item-ids","title":"Item IDs","text":"<p>The GUI appearance editor uses a csv file generated by BakkesMod using the <code>dumpitems</code> command. You can see the most recently generated file here: https://github.com/RLBot/RLBotGUI/blob/master/rlbot_gui/gui/csv/items.csv</p> <p>To see the items, you might want to browse at: https://rocket-league.com/items/</p>"},{"location":"botmaking/bot-customization/#colors","title":"Colors","text":"<p>There are two ways to specify your colors:</p> <ol> <li>Use <code>team_color_id</code> and <code>custom_color_id</code> to index into the swatches (see images below).</li> <li>Use <code>primary_color_lookup</code> and <code>secondary_color_lookup</code> to choose a swatch closest to the RGB value you provide.</li> </ol> <p>In either case, you're limited to the same set of colors that can be selected in-game.</p> <p>NOTE: The shade of the colors may not be correspond exactly with following pictures.</p> <p><code>team_color_id</code> are the primary color of the car. The top left color is index 0 increasing as you go right:</p> <p></p> <p></p> <p><code>custom_color_id</code> is the secondary color, also called accent. These are identical for both teams:</p> <p></p>"},{"location":"botmaking/bot-customization/#painted-items","title":"Painted Items","text":"<p>You can use a number based on this list:</p> <ul> <li>0 - None</li> <li>1 - Crimson</li> <li>2 - Lime</li> <li>3 - Black</li> <li>4 - Sky Blue</li> <li>5 - Cobalt</li> <li>6 - Burnt Sienna</li> <li>7 - Forest Green</li> <li>8 - Purple</li> <li>9 - Pink</li> <li>10 - Orange</li> <li>11 - Grey</li> <li>12 - Titanium White</li> <li>13 - Saffron</li> </ul> <p>These are set in your appearance cfg file. Example:</p> <pre><code>[Bot Paint Blue]\ncar_paint_id = 12\ndecal_paint_id = 0\nwheels_paint_id = 7 \nboost_paint_id = 7\nantenna_paint_id = 0\nhat_paint_id = 0\ntrails_paint_id = 2\ngoal_explosion_paint_id = 0\n\n[Bot Paint Orange]\n...\n</code></pre>"},{"location":"botmaking/bot-customization/#loadout-generator","title":"Loadout Generator","text":"<p>This is completely optional!</p> <p>Recently we added the ability to generate your bot's loadout with a python script. This lets you choose different loadouts based on player index, randomize parts of your loadout, etc. The script is executed at the beginning of every match.</p> <p>To use this feature, put a line like <code>loadout_generator = loadout_generator_example.py</code> in your bot cfg file, in the [Locations] section. Then create a python file like this:</p> <pre><code>import random\nfrom pathlib import Path\n\nfrom rlbot.agents.base_loadout_generator import BaseLoadoutGenerator\nfrom rlbot.matchconfig.loadout_config import LoadoutConfig\n\n\nclass SampleLoadoutGenerator(BaseLoadoutGenerator):\n    def generate_loadout(self, player_index: int, team: int) -&gt; LoadoutConfig:\n\n        # You could start with a loadout based on a cfg file in the same directory as this generator\n        loadout = self.load_cfg_file(Path('appearance.cfg'), team)\n\n        # Or you could start from scratch like this\n        # loadout = LoadoutConfig()\n\n        if player_index == 0:\n            loadout.antenna_id = 287  # use a Psyonix flag if you're the first player\n\n        loadout.team_color_id = player_index  # Different primary color depending on player index\n        loadout.paint_config.wheels_paint_id = random.choice([1, 2, 4, 5])  # Random wheel color\n\n        return loadout\n</code></pre>"},{"location":"botmaking/bot-customization/#bot-logos","title":"Bot Logos","text":"<p>Either put a file called logo.png in the same folder as your bot cfg, OR specify logo_file = ... in your bot cfg in the same section as python_file. Dimensions of 400x300 px are preferred. It will appear in RLBotGUI, and maybe on stream!</p>"},{"location":"botmaking/bot-customization/#need-inspiration","title":"Need inspiration?","text":"<p>reddit.com/r/RLFashionAdvice</p>"},{"location":"botmaking/config-file-documenation/","title":"Bot Config File","text":""},{"location":"botmaking/config-file-documenation/#sections","title":"Sections","text":""},{"location":"botmaking/config-file-documenation/#locations","title":"Locations","text":"<p>This section is poorly named at this point, but oh well. It includes:</p> <ul> <li>looks_config: The location of your bot's appearance config, relative to the cfg file.</li> <li>python_file: The location of your bot's python file, relative to the cfg file.</li> <li>logo_file: Optional. The location of an image that will represent your bot in RLBotGUI, tournament overlays, etc.</li> <li>name: The name of your bot in-game.</li> <li>supports_early_start: Optional. Indicates whether your bot can handle the early start system. Read below for details.</li> <li>requirements_file: Optional. The location of a requirements.txt for your bot. If specified, RLBotGUI will use it to warn people if there's a missing dependency, and they'll have the option to install your requirements.txt file.</li> <li>use_virtual_environment: Optional, defaults to False. Installs your bot's requirements from the requirements.txt file into a python venv so they're isolated from potentially conflicting requirements from other bots. See pr #535</li> <li>loadout_generator: Optional. Location of a script that can influence your bot's appearance on startup for randomization / index-dependent changes. See loadout generator</li> <li>requires_tkinter: Optional. Set it to true if your bot needs tkinter, and if the user is running a GUI which lacks tkinter, they will be warned.</li> </ul>"},{"location":"botmaking/config-file-documenation/#bot-parameters","title":"Bot Parameters","text":"<p>This is mainly for bot makers to add arbitrary config values useful to them. Generally the framework doesn't care what you put here, except in the case of Scratch bots.</p>"},{"location":"botmaking/config-file-documenation/#details","title":"Details","text":"<p>This section is for metadata about your bot which can be displayed to people in RLBotGUI, tournament overlays, etc. Common details included:</p> <ul> <li>developer: The name of the developer(s) of the bot.</li> <li>description: Textual description of the bot, its playstyle, how to use it, etc.</li> <li>fun_fact: A short fun fact about the bot. Sometimes displayed on stream during tournaments.</li> <li>github: A github link</li> <li>language: Which language/technology the bots was made with</li> <li>tags: A comma separated list of tags. Primarily used by the RLBotGUI to put the bot in the correct tabs. Common tags include: 1v1, teamplay, goalie, hoops, dropshot, snow-day, rumble, spike-rush, heatseeker, memebot</li> </ul>"},{"location":"botmaking/config-file-documenation/#early-start-system","title":"Early Start System","text":"<p>If a bot adds <code>supports_early_start = True</code> then it will be started up before the Rocket League match loads, which gives it lots of extra time. To live happily in this situation the bot MUST be able to deal with weird game tick packets, e.g.:</p> <ul> <li>Could have unexpected bots / unexpected teams</li> <li>The bot's index might be higher than the packet's num_cars</li> <li>The packet may transition suddenly to a different set of cars, different game type, etc</li> </ul>"},{"location":"botmaking/config-file-documenation/#match-config-file-rlbotcfg","title":"Match Config File (rlbot.cfg)","text":"<p>This configuration controls which bots are in the game, what arena to play on, what mutators to use, etc. Example config</p>"},{"location":"botmaking/config-file-documenation/#sections_1","title":"Sections","text":"<ul> <li>RLBot Configuration:  Contains miscellaneous overall configurations</li> <li>Team Configuration:  Configurations at the team level</li> <li>Match Configuration:  Configurations for a specific match</li> <li>Mutator Configuration:  Mutators for a specific match</li> <li>Participant Configuration:  What participants are playing</li> <li>Scripts: What scripts should be ran</li> </ul>"},{"location":"botmaking/config-file-documenation/#rlbot-configuration","title":"RLBot Configuration","text":"<ul> <li>extensions_path:  A path to the extension file used later on for extra game controlling needs</li> <li>launcher_preference: 'steam' or 'epic'. For people who have the game on both, determines which launcher is preferred for opening Rocket League.</li> </ul>"},{"location":"botmaking/config-file-documenation/#team-configuration","title":"Team Configuration","text":"<p>NOTE:  None of these take an effect currently</p> <ul> <li>Team Blue Color:  Changes Blue team color, use 0 to use default color</li> <li>Team Blue Name: Changes the Team name to use instead of 'Blue'</li> <li>Team Orange Color: Changes Blue team color, use 0 to use default color</li> <li>Team Orange Name: Changes the Team name to use instead of 'Orange'</li> </ul>"},{"location":"botmaking/config-file-documenation/#match-configuration","title":"Match Configuration","text":"<ul> <li>num_participants: The total number of cars that will be spawned into the match.</li> <li>game_mode: 'Soccar', 'Hoops', 'Dropshot', 'Snowday', 'Rumble'</li> <li>game_map, e.g. \"Mannfield\". All possible values</li> <li>skip_replays: If True, replays are automatically skipped after a goal. However, also prevents match replays from being saved.</li> <li>start_without_countdown: If True, skips kickoff countdown</li> <li>existing_match_behavior: 'Restart If Different', 'Restart', 'Continue And Spawn'</li> <li>enable_lockstep: If True, the framework will wait for outputs from all bots before advancing to the next frame.</li> <li>enable_rendering: If True, bots' debug rendering is turned on at the start of a match (toggle it with page up/down).</li> <li>enable_state_setting: If True, bots are allowed to manipulate the game state (useful during development).</li> <li>auto_save_replay: If True, the match replay is automatically saved.</li> </ul>"},{"location":"botmaking/config-file-documenation/#mutator-configuration","title":"Mutator Configuration","text":"<p>All of these default to the \"normal\" value (the first in the list) if you don't specify them.</p> <ul> <li>Match Length: Changes the length of the match. '5 Minutes', '10 Minutes', '20 Minutes', 'Unlimited'</li> <li>Max Score: Changes the number of goals needed to win. 'Unlimited', '1 Goal', '3 Goals', '5 Goals'</li> <li>Game Speed: 'Default', 'Slo-Mo', 'Time Warp'</li> <li>Overtime: 'Unlimited', '+5 Max, First Score', '+5 Max, Random Team'</li> <li>Ball Max Speed: 'Default', 'Slow', 'Fast', 'Super Fast'</li> <li>Ball Type: 'Default', 'Cube', 'Puck' or 'Basketball'</li> <li>Ball Weight: 'Default', 'Super Light', 'Light' or 'Heavy'</li> <li>Ball Size: 'Default', 'Small', 'Large', 'Gigantic'</li> <li>Ball Bounciness: 'Default', 'Low', 'High', 'Super High'</li> <li>Boost Amount: 'Default', 'Unlimited', 'Recharge (Slow)', 'Recharge (Fast)' or 'No Boost'</li> <li>Rumble: 'None', 'Default', 'Slow', 'Civilized', 'Destruction Derby', 'Spring Loaded', 'Spikes Only' or 'Spike Rush'</li> <li>Boost Strength: '1x', '1.5x', '2x', '10x'</li> <li>Gravity: 'Default', 'Low', 'High' or 'Super High'</li> <li>Demolish: 'Default', 'Disabled', 'Friendly Fire', 'On Contact' or 'On Contact (FF)'</li> <li>Respawn Time: '3 Seconds', '2 Seconds', '1 Second', 'Disable Goal Reset'</li> </ul>"},{"location":"botmaking/config-file-documenation/#participant-configuration","title":"Participant Configuration","text":"<ul> <li>participant_config_NUMBER:  The path to a participant configuration</li> <li>participant_team_NUMBER: what team the bot is on</li> <li>participant_type_NUMBER: the type of the bot Accepted values are \"human\", \"rlbot\", \"psyonix\", \"party_member_bot\", and \"controller_passthrough\", You can have up to 4 local humans and they must be activated in game or it will crash. If no player is specified you will be spawned in as spectator!<ul> <li>human - not controlled by the framework (but must appear before bot entries)</li> <li>rlbot - controlled by the framework</li> <li>psyonix - default bots (skill level can be changed with participant_bot_skill</li> <li>party_member_bot - controlled by an rlbot but the game detects it as a human</li> <li>controller_passthrough - controlled by a human but runs through the framework</li> </ul> </li> <li>participant_bot_skill_NUMBER: 0.0 is Rookie, 0.5 is pro, 1.0 is all-star</li> <li>participant_loadout_config_NUMBER: the path to the loadout.   This overrides the agent config if not None</li> </ul> <p>Example contents:</p> <pre><code>participant_config_0 = my_folder/my_bot.cfg\nparticipant_config_1 = my_folder/other_bot.cfg\n\nparticipant_team_0 = 0\nparticipant_team_1 = 1\n\nparticipant_type_0 = rlbot\nparticipant_type_1 = rlbot\n\nparticipant_bot_skill_0 = 1.0\nparticipant_bot_skill_1 = 1.0\n</code></pre>"},{"location":"botmaking/config-file-documenation/#scripts","title":"Scripts","text":"<p>This field is optional, by default no scripts will be ran.</p> <ul> <li>script_config_NUMBER: The path to the script configuration</li> </ul> <p>Example contents:</p> <pre><code>script_config_0 = src/test/python/agents/script/sample_script.cfg\nscript_config_1 = src/test/python/agents/script/sample_script.cfg\n</code></pre>"},{"location":"botmaking/dropshot/","title":"Dropshot","text":"<p>As of August 19. 2018 the RLBot framework officially supports Dropshot with access to locations and states of floor tiles. This page contains information and useful values related to the Dropshot game mode.</p> <p>To make RLBot start a Dropshot game you have to set the following values in <code>rlbot.cfg</code>:</p> <pre><code>game_mode = Dropshot\ngame_map = DropShot_Core707\n</code></pre>"},{"location":"botmaking/dropshot/#tiles","title":"Tiles","text":"<p>There are 140 tiles in total. Locations and owning team can be found in the agent's FieldInfo as GoalInfo objects. In Python <code>self.get_field_info().goals</code> will be a list of the floor tiles with following attributes:</p> <pre><code>GoalInfo: {\n  'team_num': int,\n  'location': Vector3,\n  'direction': Vector3,\n}\n</code></pre> <p>Example: To access the location of tile 0 in Python, write: <code>self.get_field_info().goals[0].location</code></p> <p>A list of all locations can be found here.</p> <p>To access the state of tile 0 in Python, write: <code>packet.dropshot_tiles[0].tile_state</code>. This is an integer which corresponds to:</p> <ul> <li>0: Unknown</li> <li>1: Filled</li> <li>2: Damaged</li> <li>3: Open</li> </ul> <p>The tiles will be sorted the same way in FieldInfo and GameTickPacket so indices match.</p> <p>The tiles are hexagonal in shape. The distance between centres is 768 uu (except for the middle where the distance from blue tiles to orange tiles is 256 uu. A neutral strip about 128 uu wide covers the tiles partially). The image below shows the relative dimensions of a Dropshot tile.</p> <p></p>"},{"location":"botmaking/dropshot/#arena","title":"Arena","text":"<p>The tiles are layed out in rows of 7,8,9,10,11,12,13 |middle| 13,12,11,10,9,8,7. Where tile 0 is in the blue corner (back left if you are on blue team) and tile 139 is in an orange corner (back left if you are on the orange team).</p> <p>The overall layout of the arena and tile indices can be seen below.</p> <p></p> <p>The arena is a regular hexagon except its rounded corners. Here are some dimensions:</p> <ul> <li>Center: (0, 0)</li> <li>Floor level: 3.2 uu</li> <li>Center to wall: 4555 uu</li> <li>Center to corner: 5026 uu</li> <li>Center to corner (without rounding walls): 5259.66 uu</li> <li>Wall length: about 5026 uu</li> <li>Arena height: 1986 uu</li> </ul> <p>Note that the tiles on the boundaries are not complete - the rounded base of the walls overlaps the tiles to varying degrees (approximately 30-40% of the tile is overlapped, and the tile centrepoints are always visible).</p> <p>You may notice that tiles' locations are at z=0, but floor level is z=3.2. This is because the tiles have a thickness.</p>"},{"location":"botmaking/dropshot/#within-arena-script","title":"Within arena script","text":"<p>Here's a small script to check if a point is within the arena:</p> <pre><code>def is_within_arena(point):\n    HEIGHT = 1986\n    TO_WALL = 4555\n    TO_CORNER = 5260  # 4555 / math.sin(60)\n\n    if point.z &lt; 0 or HEIGHT &lt; point.z:\n        return False\n\n    ax = abs(point.x)\n    ay = abs(point.y)\n\n    if TO_CORNER &lt; ax or TO_WALL &lt; ay:\n        return False\n\n    return TO_WALL * TO_CORNER - TO_WALL * ax - 0.5 * TO_CORNER * ay &gt;= 0;\n</code></pre>"},{"location":"botmaking/dropshot/#ball","title":"Ball","text":"<p>Ball radius: 102.24 uu</p> <p>The GameTickPacket contains Dropshot info about the ball. It can be found in the DropshotBallInfo object at <code>packet.game_ball.drop_shot_info</code> which contains the variables: <code>absorbed_force</code>, <code>damage_index</code>, and <code>force_accum_recent</code>.</p> <p>The ball has three phases. The current phase is the variable <code>damage_index</code> where:</p> <ul> <li>0: Normal</li> <li>1: Charged</li> <li>2: Super Charged</li> </ul> <p>The ball gains charge as it is hit by cars. When a car exerts a force on the ball, the ball charges up equal to the magnitude of the force (energy). The ball enters the next phase when it reaches a certain threshold:</p> <ul> <li>Charged: 2500 energy</li> <li>Super Charged: 11000 energy</li> </ul> <p>The current amount of energy (force absorded) is the <code>absorbed_force</code> variable.</p> <p>However, a hit does not always charge the ball. To make the ball charge up, the impact must be at least 500 energy, otherwise the ball will not charge at all. Furthermore, when the ball gets hit, it will temporarily accept less energy. The variable <code>force_accum_recent</code> stores the accumulated absorbed force (energy), but no more than 2500 energy. It decays over time at a rate of 2500 energy per second, and the ball will at most absorb <code>2500 - force_accum_recent</code> energy on a hit. Combined, this prevents players from charging the ball too quickly, limited to 2500 energy every second.</p> <p>Example: if you hit the ball with an impact of 2000 uu/s at t=0, and you hit the ball again with a force of 2000 uu/s at t=0.5, the <code>force_accum_recent</code> has decayed by 1250 and will be 750 when you hit the ball the second time, and therefore the ball will not accept more than 1750 energy, which means 250 energy gets lost.</p> <p>The ball's charge is reset, whenever it damages a floor tile owned by the opponent of whoever last touched the ball. To make damage the ball must hit the tile with a velocity of 250 uu/s or more perpendicular to the surface of contact. The side of a tile can only be hit if there's an open tile next to it, so usually the ball will hit the top of the tiles, and in those cases only the Z velocity matters, and must be 250 uu/s or more to make damage. There is also must have passed 0.2 seconds since the last time the ball damaged a tile.</p> <p>You can tell which team last hit the ball by checking the <code>packet.game_ball.latest_touch</code> object. See Input and output for more.</p> <p>At kickoff the ball is launched straight up into the air with a velocity of 1000 uu/s and reaches a height of about 847 uu in 1.54 seconds.</p>"},{"location":"botmaking/dropshot/#spawning","title":"Spawning","text":"<p>You always spawn with 100 boost.</p> <p>Kickoff spawn locations are similar to soccar spawn locations, but not identical. In dropshot spawn locations are:</p> Kickoff Blue Orange Right corner loc: (-1867, -2379), yaw: 0.25 pi loc: (1867, 2379), yaw: -0.75 pi Left corner loc: (1867, -2379), yaw: 0.75 pi loc: (-1867, 2379), yaw: -0.25 pi Back right loc: (-256.0, -3576), yaw: 0.5 pi loc: (256.0, 3576), yaw: -0.5 pi Back left loc: (256.0, -3576), yaw: 0.5 pi loc: (-256.0, 3576), yaw: -0.5 pi Far back center loc: (0.0, -4088), yaw: 0.5 pi loc: (0.0, 4088), yaw: -0.5 pi Demolished Blue Orange Right corner loc: (-2176, -3408), yaw: 0.5 pi loc: (2176, 3408), yaw: -0.5 pi Left corner loc: (2176, -3408), yaw: 0.5 pi loc: (-2176, 3408), yaw: -0.5 pi"},{"location":"botmaking/dropshot/#boost-regeneration","title":"Boost regeneration","text":"<p>In Dropshot you regenerate boost at a rate of about 10 boost/sec. However, you do not regen boost while boosting. When you stop boosting (or run out of boost), there is a delay of about 0.5 second before you start gaining boost again. If you are at 0 boost and boost button is pressed, the timer will reset every 0.5 seconds until the button is released.</p>"},{"location":"botmaking/hoops/","title":"Hoops","text":"<p>The RLBot framework support the Hoops game mode. This page contains useful values specifically about Hoops.</p> <p>To make RLBot start a Hoops game you have to set the following values in <code>rlbot.cfg</code>:</p> <pre><code>game_mode = Hoops\n# Alternative map: Hoops_TheBlocks\ngame_map = Hoops_DunkHouse\n</code></pre>"},{"location":"botmaking/hoops/#arena","title":"Arena","text":"<p>Hoops is usually played on the map Dunk House or The Block. The dimensions for the arena are:</p> <ul> <li>Floor z: 0</li> <li>Side wall x: \u00b12966.67</li> <li>Back wall y: \u00b13581</li> <li>Ceiling z: 1820</li> <li>The diagonal walls intersect the x and y axes at: \u00b15782</li> <li>Wall bottom ramp radius: 172</li> </ul>"},{"location":"botmaking/hoops/#goals","title":"Goals","text":"<p>In Hoops, the goals are two rings. The rings are semi-circles placed (0, \u00b12969, 364) with radius 655 and they are connected to the wall with straight lines (except a small curve near the walls). The pipe that makes up the ring has a diameter of approximately 42.</p>"},{"location":"botmaking/hoops/#boost-pads","title":"Boost Pads","text":"<p>There are 20 boost pads on a Hoops arena, 6 of them are big.</p> <p>Big boost pads are located at (\u00b12176, \u00b12944, 8) and (\u00b12432, 0, 8).</p> <p>Locations of all boost pads:</p> <pre><code>[ 2176, -2944, 8] (0)\n[-2176, -2944, 8] (1)\n[    0, -2816, 0] (2)\n[-1280, -2304, 0] (3)\n[ 1280, -2304, 0] (4)\n[-1536, -1024, 0] (5)\n[ 1536, -1024, 0] (6)\n[  512,  -512, 0] (7)\n[ -512,  -512, 0] (8)\n[-2432,     0, 8] (9)\n[ 2432,     0, 8] (10)\n[  512,   512, 0] (11)\n[ -512,   512, 0] (12)\n[-1536,  1024, 0] (13)\n[ 1536,  1024, 0] (14)\n[-1280,  2304, 0] (15)\n[ 1280,  2304, 0] (16)\n[    0,  2816, 0] (17)\n[-2176,  2944, 8] (18)\n[ 2176,  2944, 8] (19)\n</code></pre> <p>Note: Some of these coordinates have been rounded.</p>"},{"location":"botmaking/hoops/#ball","title":"Ball","text":"<p>The radius of the ball is 98.38. When the kickout countdown hits zero, the ball is given a Z velocity of 1000. But other than that, the physics of the ball is similar to soccar.</p>"},{"location":"botmaking/hoops/#spawning","title":"Spawning","text":"Kickoff Blue Orange Right corner loc: (-1536, -3072), yaw: 0.5 pi loc: (1536, 3072), yaw: -0.5 pi Left corner loc: (1536, -3072), yaw: 0.5 pi loc: (-1536, 3072), yaw: -0.5 pi Back right loc: (-256, -2815), yaw: 0.5 pi loc: (256, 2815), yaw: -0.5 pi Back left loc: (256, -2815), yaw: 0.5 pi loc: (-256, 2815), yaw: -0.5 pi Far back center loc: (0, -3200), yaw: 0.5 pi loc: (0, 3200), yaw: -0.5 pi Demolished Blue Orange Right corner loc: (-1152, -3072), yaw: 0.5 pi loc: (1152, 3072), yaw: -0.5 pi Left corner loc: (1152, -3072), yaw: 0.5 pi loc: (-1152, 3072), yaw: -0.5 pi"},{"location":"botmaking/input-and-output-data/","title":"Input and output data","text":"<p>All supported languages have access to the same data, though syntax and conventions will vary. It is controlled by this specification: rlbot.fbs</p> <p>Language-specific guides:</p> <ul> <li>Python</li> <li>Java</li> <li>C#</li> <li>Rust</li> <li>Nim</li> </ul>"},{"location":"botmaking/jumping-physics/","title":"The Physics Of Jumping","text":"<p>There are several forces that can be acting on a Rocket League car at any moment and understanding their influence is an important step towards giving your bot accurate and dependable utilities. This section will be focused on the mechanics of jumping and how these forces interact to allow you to accurately simulate a jump and provide useful information such as how high your bot can reach and at what time they'll get there. So let's get started by first declaring these \"forces\" I've been referring to thus far.</p>"},{"location":"botmaking/jumping-physics/#gravity","title":"Gravity","text":"<p>Under normal circumstances, gravity functions much like you'd expect. It constantly applies a force downwards towards the floor. By default, the force is <code>650 uu/s^2</code> but that's not a given. Luckily the current gravity value is supplied within the GameTickPacket (<code>GameTickPacket.game_info.world_gravity_z</code>) passed to your bot's <code>get_output()</code> every frame.</p>"},{"location":"botmaking/jumping-physics/#sticky-force","title":"Sticky Force","text":"<p>This force is responsible for the magnet-like effect pulling your wheels to walls and other surfaces. This force unlike gravity is applied in the relative down direction pushing the car's wheels towards a surface in the immediate vicinity with the force of <code>325 uu/s^2</code>. This effect only persists for a short time after jumping thankfully and is no longer a consideration after 3 frames in the air after a jump. This results in a force of <code>8.125</code> (<code>(1/120) * 3 * 325</code>) being negated from jumps.</p>"},{"location":"botmaking/jumping-physics/#jump-impulse","title":"Jump Impulse","text":"<p>The instantaneous force applied in the relative up direction (towards your car's ceiling) of <code>292</code> when the jump button is first pressed. This force is the same for the first jump as well as the second jump without a flip.</p>"},{"location":"botmaking/jumping-physics/#jump-hold-bonus","title":"Jump Hold Bonus","text":"<p>This is the upwards velocity bonus granted for holding down the jump button on the first jump. It can grant a total additional <code>292</code> force in the relative upwards direction over <code>0.2s</code>. Holding jump longer than <code>0.2s</code> grants no additional bonus. A minimum of 3 ticks of jump bonus is applied to the first jump resulting in an additional <code>36.5</code> (<code>(1/120) * 3 * 1460</code>) force over the first 3 frames of a jump.</p>"},{"location":"botmaking/jumping-physics/#throttle-acceleration","title":"Throttle Acceleration","text":"<p>Believe it or not, throttle still has an effect on your car even while airborne. Forward throttle while airborne exerts a force of <code>66.667 uu/s^2</code> in your car's relative forward direction. Reverse throttle's effect is halved with a force of <code>33.334 uu/s^2</code> in the relative rear direction.</p>"},{"location":"botmaking/jumping-physics/#implementing-a-jump-simulation","title":"Implementing A Jump Simulation","text":"<p>The following code snippet provides an implementation of a jump simulation naively assuming the bot is perfectly flat on the ground with no initial velocity, gravity is at default settings and the bot executes a frame-perfect jump sequence.</p> <pre><code>def naive_double_jump_simulation(time_allowed: float) -&gt; list:\n    gravity = -650\n    jump_impulse = 292\n    time_increment = 1 / 120\n    sticky_force = -325\n    sticky_timer = time_increment * 3\n    hold_bonus_increment = (292 * 5) * time_increment\n    max_hold_time = 0.2\n    simulated_z_velocity = 0\n    simulated_height = 17.01  # default sitting height of octane\n    simulation_time = 0\n    double_jumped = False\n    jump_slices = []\n\n    while simulation_time &lt; time_allowed:\n        if simulation_time == 0:\n            simulated_z_velocity += jump_impulse\n\n        elif simulation_time &gt; max_hold_time + time_increment and not double_jumped:\n            simulated_z_velocity += jump_impulse\n            double_jumped = True\n\n        if simulation_time &lt; max_hold_time:\n            simulated_z_velocity += hold_bonus_increment\n\n        if simulation_time &lt; sticky_timer:\n            simulated_z_velocity += sticky_force * time_increment\n\n        simulated_z_velocity += gravity * time_increment\n        simulated_height += simulated_z_velocity * time_increment\n        simulation_time += time_increment\n        jump_slices.append(simulated_height)\n\n    return jump_slices\n</code></pre> <p></p> <p>Calling naive_doublejump_simulation(2.0) will return a list showing the simulated height of the car at every increment from 0 to 2 seconds into the future. A more robust solution should account for more variability in circumstances such as the car's current relative up direction as well as current velocity.</p>"},{"location":"botmaking/jumping-physics/#useful-considerations-for-implementing-jumping-simulations-and-mechanics","title":"Useful Considerations For Implementing Jumping Simulations And Mechanics","text":"<ul> <li>The second jump remains viable for between 1.25 and 1.45 seconds with the potential 0.2s time extension provided by holding the first jump for the maximum bonus duration.</li> <li>The maximum speed of a car in Rocket League is <code>2300</code>. Any forces applied that would result in a magnitude exceeding <code>2300</code> will be applied as per usual but then normalized back down to the limit of <code>2300</code>.</li> </ul> <p>Note: Rocket League's physics engine runs at 120hz so all calculations provided are based on that number as the base of a time step (<code>1/120</code>).</p>"},{"location":"botmaking/machine-learning-faq/","title":"Machine learning faq","text":"<p>A: There are a lot of helpful resources pinned to the #ml-discussion channel of the RLBot discord. You should also join the RLGym discord, which is more specifically for ML.</p> <p>Q: I'm new to RLBot, how do I get started with ML?</p> <p>A: We strongly recommend you begin by writing a hard-coded bot to get the hang of RLBot, and coding for Rocket League. Once you feel confident, join the RLGym discord, check out the official RLGym website which has useful docs and guides, and look at the dedicated #machine-learning channel in the RLBot discord for helpful resources.</p> <p>Q: What can I use ML for in Rocket League?</p> <p>A: Lots of things! Most people simply use it to make bots for playing the game, but that isn't all. Optimizing specific mechanics rather than the entire game (wave-dashing, aerials, power-sliding, etc) and analyzing replays (predicting shot percentages, car positions, etc) are some other things people have done.</p> <p>Q: How could I use the replays available at calculated.gg?</p> <p>A: Tools like Training Data Extractor and carball exist to format replay data into an RLBot tick packet, and approximate player inputs between frames. These enable users to easily handle data available in replays for whatever purpose they might have.</p> <p>Q: Is it possible to get controls from replays so I can train a model to copy humans?:</p> <p>A: Training controls directly from replays has been used to some success, most notably with Ripple. There exist tools to find inputs from replay files, such as RLCarInputSolver, and even public replay repositories (such as the one Ripple used, here) with tens of thousands of hours of data!</p> <p>Q: Can I use a clone of Rocket League for training and then transfer it to the real game?</p> <p>A: This is how most people train now! Rocketsim is used for training by basically everyone, but you don't really have to think about it, as rocketsim is used by default by current libraries.</p> <p>Q: Can I use Supervised Learning to train a bot that mimics other bots?</p> <p>A: Yes you can! The ML bots Levi and Tensorbot were trained this way.</p> <p>Q: Can I use this or that method to speed up Reinforcement Learning?</p> <p>A: Try it out! If it works for other problems, then it might also work for Rocket League. Don't hesitate to ask in the discord if you want a second opinion or want to know if it's been tried before.</p>"},{"location":"botmaking/manipulating-game-state/","title":"Manipulating game state","text":""},{"location":"botmaking/manipulating-game-state/#overview","title":"Overview","text":"<p>We have a feature that lets you set exact positions, velocities, etc. for the ball and cars. You may be familiar with BakkesMod, this is very similar. It won't be enabled during tournaments, but it's very useful when building and debugging your bot.</p>"},{"location":"botmaking/manipulating-game-state/#possibilities","title":"Possibilities","text":"<ul> <li>Set up a specific scenario for your bot to try over and over. Better than custom training, because:<ul> <li>You have control over car orientation, velocity, angular velocity, and boost amount</li> <li>You can do it in the middle of an exhibition match with opponents</li> <li>You can control it all from inside your bot code</li> </ul> </li> <li>Build training sets for machine learning</li> <li>Record snapshots during a game and \"rewind\" if you encounter a natural situation you want to iterate on</li> <li>Hover your car in midair while you work on your orientation code</li> <li>Build wacky physics rules to change the game, e.g. making the ball bounce off invisible walls, accelerate in a certain direction, etc</li> </ul>"},{"location":"botmaking/manipulating-game-state/#language-specific-documentation","title":"Language-specific documentation","text":"<ul> <li>Python</li> <li>Java</li> <li>C#</li> </ul>"},{"location":"botmaking/matchcomms/","title":"Matchcomms","text":""},{"location":"botmaking/matchcomms/#matchcomms-allows-communication-between-participants-in-a-match","title":"Matchcomms allows communication between participants in a match.","text":"<p>Use cases:</p> <ul> <li>Telling your teammate where you intend to go</li> <li>Setting parameters on bots in a training exercise</li> <li>Bootstrapping a more efficient form of communication</li> </ul> <p>Currently only broadcasting to all participants is supported.</p>"},{"location":"botmaking/matchcomms/#architecture","title":"Architecture","text":""},{"location":"botmaking/matchcomms/#examples","title":"Examples","text":"<p>Python example for reading and replying to messages in a bot.</p> <p>Example training exercise which sets parameters on the bot</p>"},{"location":"botmaking/matchcomms/#tmcp","title":"TMCP","text":"<p>TMCP stands for the Team Match Communication Protocol. It is an attempt at standardizing inter-bot communication via the match comms system.</p> <p>See this wiki page for implementation details.</p>"},{"location":"botmaking/matchcomms/#supported-languages","title":"Supported Languages","text":"<ul> <li>Python has strong support, as described above</li> <li>Java bots will receive args like <code>--matchcomms-url ws://localhost:53970</code> when starting up. No library support yet for creating / managing the connection.</li> <li>C# bots will receive args like <code>--matchcomms-url ws://localhost:53970</code> when starting up. No library support yet for creating / managing the connection.</li> </ul>"},{"location":"botmaking/quickchat/","title":"Quickchat","text":""},{"location":"botmaking/quickchat/#overview","title":"Overview","text":"<p>You can make your bot send quickchat! We support sending all standard quickchats, and also some custom ones! You can find the full list here.</p> <p>It's now possible to read quick chat too, assuming the framework for your chosen language has added support. You'll be able to read the chat log regardless of what language send the message. Messages sent on the team-only channel will be hidden from opponents appropriately.</p> <p>Using quick chat is a little different in each language, see the specific links below.</p>"},{"location":"botmaking/quickchat/#language-specific-documentation","title":"Language-specific documentation","text":"<ul> <li>Python</li> <li>Java</li> <li>C#</li> </ul> <p>Other languages support quickchat, we just don't have wikis yet.</p>"},{"location":"botmaking/rendering/","title":"Rendering","text":"<p>An incredibly useful new addition to RLBot v4 is the rendering feature. It allows you to draw objects on screen, which can make debugging and testing your bot so much easier. For example, you could draw the predicted ball path, or draw where the bot wants to go.</p> <p>Rendering in other languages: Java, C#</p>"},{"location":"botmaking/rendering/#enablingdisabling-of-rendering","title":"Enabling/disabling of rendering","text":"<p>When installing the RLBotGUI, rendering will be disabled by default. You can turn it on by clicking 'Extra' and ticking 'Enable Rendering' in the GUI. However, rendering can also be enabled or disabled any time using the <code>page up</code> and <code>page down</code> keys, respectively. So if your rendering isn't appearing, make sure to press <code>page up</code> before panicking.</p>"},{"location":"botmaking/rendering/#the-basics","title":"The basics","text":"<p>The renderer object is built into the BaseAgent class, so you don't need to import anything other than the BaseAgent. Each time you want to render something, you start with <code>self.renderer.begin_rendering()</code> and end with <code>self.renderer.end_rendering()</code>. The rendering code goes in between the <code>begin_rendering()</code> and <code>end_rendering()</code>. Let's take a look at an example:</p> <pre><code>class RenderingTutorial(BaseAgent):\n    def get_output(self, packet: GameTickPacket) -&gt; SimpleControllerState:\n        controller = SimpleControllerState()\n\n        self.renderer.begin_rendering()\n        self.renderer.draw_rect_2d(20, 20, 200, 200, True, self.renderer.black())\n        self.renderer.end_rendering()\n\n        return controller\n</code></pre> <p>We can see here that every <code>get_output</code> call, the on-screen drawings get updated. In this example, the <code>draw_rect_2d</code> method is used. Let's go over all the methods you can use:</p> <p>(Note: The argument names aren't exactly what appear in the framework itself, but the argument positions are the same)</p>"},{"location":"botmaking/rendering/#rendering-a-large-amount","title":"Rendering a large amount","text":"<p>There are a few limits you can hit when rendering:</p> <ul> <li>MessageLargerThanMax</li> <li>Not sending message to Rocket League because that would bring the bytes sent since last receive to...</li> </ul> <p>You can bypass the MessageLargerThanMax one by using multiple render groups. Example:</p> <pre><code>self.renderer.begin_rendering('my_big_render')\nfor i in range(0, 200):\n    self.renderer.draw_rect_3d(...)\nself.renderer.end_rendering()\n\nself.renderer.begin_rendering('my_big_render_part_2')\nfor i in range(200, 400):\n    self.renderer.draw_rect_3d(...)\nself.renderer.end_rendering()\n</code></pre> <p>If you hit the other limit, you're out of luck.</p>"},{"location":"botmaking/rendering/#renderercreate_color-and-other-colors","title":"renderer.create_color and other colors","text":"<pre><code>create_color(a, r, g, b)\n</code></pre> <ul> <li>a, r, g, b - Alpha, red, green, blue. From 0 to 255.</li> </ul> <p>This doesn't draw anything on screen, but it is used for creating colors that you can use for the other methods that draw on screen. The renderer also has a list of color methods that gives you the most common colors:</p> <pre><code>renderer.black()\nrenderer.white()\nrenderer.gray()\nrenderer.blue()\nrenderer.red()\nrenderer.green()\nrenderer.lime()\nrenderer.yellow()\nrenderer.orange()\nrenderer.cyan()\nrenderer.pink()\nrenderer.purple()\nrenderer.teal()\n</code></pre> <p>Lastly, there's the <code>team_color</code> method. Using this your bot renders with different colors depending on which team it is on.</p> <pre><code>team_color(team=None, alt_color=False)\n</code></pre> <ul> <li>team - (Optional, None by default) Index of a team (0 for blue, 1 for orange) or None. If set to None, it will use calling bot's team.</li> <li>alt_color - (Optional, False by default) Wether or not to return the alternate team color instead. If set to False, this method returns blue for blue team and orange for orange team. If set to True, this method returns cyan for blue team and red for orange team.</li> </ul>"},{"location":"botmaking/rendering/#rendererdraw_rect_2d","title":"renderer.draw_rect_2d","text":"<p>This draws a rectangle on screen. Example : draw_rect_2d(20, 20, 200, 200, True, self.renderer.black()) </p> <pre><code>draw_rect_2d(x, y, width, height, fill, color)\n</code></pre> <ul> <li>x, y - The top left x and y screen coordinates for the rectangle. (0, 0) is the top left of the screen.</li> <li>width, height - The width and height of the rectangle.</li> <li>fill - If True, the entire rectangle is filled with color, else it is just an outline of color.</li> <li>color - The color of the rectangle. See <code>renderer.create_color</code>.</li> </ul>"},{"location":"botmaking/rendering/#rendererdraw_line_2d","title":"renderer.draw_line_2d","text":"<p>NOTE: Currently not supported.</p> <p>Draws a 2D line flat on the screen.</p> <pre><code>draw_line_2d(start_x, start_y, end_x, end_y)\n</code></pre> <ul> <li>start_x, start_y - Where the line starts. (0, 0) is the top left of the screen.</li> <li>end_x, end_y - Where the line ends.</li> </ul>"},{"location":"botmaking/rendering/#rendererdraw_string_2d","title":"renderer.draw_string_2d","text":"<p>Draws 2D text flat on the screen. Example : draw_string_2d(20, 20, 3, 3, ball_text, self.renderer.black()) example</p> <pre><code>draw_string_2d(x, y, scale_x, scale_y, text, color)\n</code></pre> <ul> <li>x, y - The top left x and y screen coordinates for the string. (0, 0) is the top left of the screen.</li> <li>scale_x, scale_y - The horizontal and vertical scale of the text.</li> <li>text - The text to render.</li> <li>color - The color of the string. See <code>renderer.create_color</code>.</li> </ul>"},{"location":"botmaking/rendering/#rendererdraw_rect_3d","title":"renderer.draw_rect_3d","text":"<p>Draws a 2D rectangle in game's 3D space. Size does not change with distance.</p> <pre><code>draw_rect_3d(location, width, height, fill, color)\n</code></pre> <ul> <li>location - The 3D game location where the rectangle should be drawn. Must be a Python list or a tuple (cannot be a ctypes or flatbuffers type).</li> <li>width, height - The width and height of the rectangle.</li> <li>fill - If True, the entire rectangle is filled with color, else it is just an outline of color.</li> <li>color - The color of the rectangle. See <code>renderer.create_color</code>.</li> </ul>"},{"location":"botmaking/rendering/#rendererdraw_string_3d","title":"renderer.draw_string_3d","text":"<p>Draws 2D text in game's 3D space. Size does not change with distance.</p> <pre><code>draw_string_3d(location, scale_x, scale_y, text, color)\n</code></pre> <ul> <li>location - The 3D game location where the text should be drawn. Must be a Python list or a tuple (cannot be a ctypes or flatbuffers type).</li> <li>scale_x, scale_y - The horizontal and vertical scale of the text.</li> <li>text - The text to render.</li> <li>color - The color of the text. See <code>renderer.create_color</code>.</li> </ul>"},{"location":"botmaking/rendering/#rendererdraw_line_3d","title":"renderer.draw_line_3d","text":"<p>Draws a 2D line in game's 3D space. Size does not change with distance.</p> <pre><code>draw_line_3d(start, end, color)\n</code></pre> <ul> <li>start, end - The starting and ending 3D game locations of the line. Must be Python lists or tuples (cannot be ctypes or flatbuffers types).</li> <li>color - The color of the line. See <code>renderer.create_color</code>.</li> </ul>"},{"location":"botmaking/rendering/#rendererdraw_line_2d_3d","title":"renderer.draw_line_2d_3d","text":"<p>NOTE: Currently not supported.</p> <p>Draws a 2D line which starts at screen coordinates and ends at the game's 3D coordinate.</p> <pre><code>draw_line_2d_3d(start_2d_x, start_2d_y, end_3d, color)\n</code></pre> <ul> <li>start_2d_x, start_2d_y - Where the line starts (on the screen).</li> <li>end_3d - Where the line ends (in 3D space). Must be a Python list or tuple (cannot be a ctypes or flatbuffers type).</li> <li>color - The color of the line. See <code>renderer.create_color</code>.</li> </ul>"},{"location":"botmaking/rendering/#rendererdraw_polyline_2d","title":"renderer.draw_polyline_2d","text":"<p>NOTE: Currently not supported.</p> <p>Draws multiple connected 2D lines flat on the screen. Useful for rendering paths or pictures.</p> <pre><code>draw_polyline_2d(locations, color)\n</code></pre> <ul> <li>locations - A list of 2D points. A line will be drawn from first point to the second point, and from second point to the third point, ect. (0, 0) is the top left of the screen.</li> <li>color - The color of the line. See <code>renderer.create_color</code>.</li> </ul>"},{"location":"botmaking/rendering/#rendererdraw_polyline_3d","title":"renderer.draw_polyline_3d","text":"<p>Draws multiple connected lines in the game's 3D space. Useful for rendering paths. Size does not change with distance.</p> <pre><code>draw_polyline_3d(locations, color)\n</code></pre> <ul> <li>locations - A list of 3D locations. A line will be drawn from first location to the second location, and from second location to the third location, ect. Each location must be a Python list or tuple (cannot be a ctypes or flatbuffers type).</li> <li>color - The color of the line. See <code>renderer.create_color</code>.</li> </ul>"},{"location":"botmaking/scripts/","title":"Scripts","text":"<p>Sometimes it can be useful to have access to game values, debug rendering or state setting while not being a bot playing within the match. The framework has an easy solution for that - scripts.</p> <p>Scripts are very similiar to normal bots. They need a config file and a python executable. The config file can be loaded by RLBotGUI like a normal bot - to enable it, just click the checkbox next to its name. The script will be automatically started and terminated by the framework.</p> <p></p> <p>Example config:</p> <pre><code>[Locations]\nscript_file = ./my_script.py\nname = My Script\n\n[Details]\ndescription = Example script\nlanguage = python\n</code></pre> <p>Example <code>my_script.py</code>:</p> <pre><code>import time\n\nfrom rlbot.agents.base_script import BaseScript\nfrom rlbot.utils.game_state_util import GameState\n\n\n# Extending the BaseScript class is purely optional. It's just convenient / abstracts you away from\n# some strange classes like GameInterface\nclass MyScript(BaseScript):\n    def __init__(self):\n        super().__init__(\"My Script\")\n\n    def run(self):\n        # state setting\n        self.set_game_state(GameState(console_commands=[\"Stat FPS\"]))\n\n        while True:\n            time.sleep(0.5)\n\n            # updating packet\n            packet = self.get_game_tick_packet()\n\n            # rendering\n            color = self.renderer.white()\n            text = f\"seconds_elapsed : {packet.game_info.seconds_elapsed}\"\n            self.game_interface.renderer.begin_rendering()\n            self.game_interface.renderer.draw_string_2d(20, 200, 2, 2, text, color)\n            self.game_interface.renderer.end_rendering()\n\n\n# You can use this __name__ == '__main__' thing to ensure that the script doesn't start accidentally if you\n# merely reference its module from somewhere\nif __name__ == \"__main__\":\n    script = MyScript()\n    script.run()\n</code></pre> <p>This script will render some text on the screen every 0.5 seconds.</p> <p>If you want your loop to be run every tick, you might want to use a blocking call instead of <code>time.sleep</code> like this:</p> <pre><code>while True:\n   packet = self.wait_game_tick_packet()\n   ...\n</code></pre> <p>For all available methods in the <code>BaseScript</code> class and their descriptions, see its implementation here.</p> <p>Another fully functional script example</p>"},{"location":"botmaking/shooting-the-ball-towards-or-away-from-a-target/","title":"Shooting the ball towards or away from a target","text":""},{"location":"botmaking/shooting-the-ball-towards-or-away-from-a-target/#this-tutorial-is-not-language-specific","title":"This tutorial is NOT language-specific!","text":"<p>This tutorial is based on the systems used by VirxERLU which is a fork of GoslingUtils.</p>"},{"location":"botmaking/shooting-the-ball-towards-or-away-from-a-target/#toc","title":"TOC","text":"<ul> <li>This tutorial is NOT language-specific!<ul> <li>TOC</li> <li>Targets and anti-targets</li> <li>Direction of approach</li> <li>Ball location offset</li> <li>Aligning with the direction of approach</li> <li>Driving</li> </ul> </li> </ul>"},{"location":"botmaking/shooting-the-ball-towards-or-away-from-a-target/#targets-and-anti-targets","title":"Targets and anti-targets","text":"<p>Firstly, a target is something that we want to hit the ball towards, and an anti-target is something that we want to hit the ball away from.</p> <ul> <li>Targets: This will be a list of two vectors. The first vector will be the left-most target, and the second will be the right-most target.</li> <li>Anti-targets: This is the same as targets, but you swap the left-most and right-most targets before giving them to the algorithm, and all the following code stays the same! This causes the algorithm to shoot the ball anywhere but between the two targets.</li> </ul> <p>We're using two points instead of just one, central point that represents the target because just one point is unrealistic and restricts our options. Two points, however, gives us a range to work with and some room for error.</p> <p>Useful game values</p> <p>For example, our left-most target vector could be <code>[800, 5213, 321.3875]</code> (orange's left goal post) and our right-most target vector could be <code>[-800, 5213, 321.3875]</code> (orange's right goal post). These values have been adjusted to account for the ball's radius (which is 92.75).</p>"},{"location":"botmaking/shooting-the-ball-towards-or-away-from-a-target/#direction-of-approach","title":"Direction of approach","text":"<p>Now we need to find the direction that we need to hit the ball in. It wouldn't be fun if we ended up hitting the ball away from our target!</p> <p>In order to do this, we need the following information:</p> <ul> <li>Left-most target</li> <li>Right-most target</li> <li>Ball location</li> <li>Car location</li> </ul> <p>Let's get started!</p> <pre><code>Vector car_to_ball = ball_location - car_location\nVector car_to_ball_direction = normalize(car_to_ball)\n\nVector ball_to_left_target_direction = normalize(left_target_location - ball_location)\nVector ball_to_right_target_direction = normalize(right_target_location - ball_location)\n</code></pre> <p>These are a bunch of directions, and they're fairly well described just by the variable names. You will have to implement your own normalize function, but here's the math behind it if you didn't know. Many example bots, including the ones for Python and Java, already have vector classes that have implemented this for you!</p> <p>Next, we need some way to change <code>car_to_ball_direction</code> so that it's between <code>ball_to_left_target_direction</code> and <code>ball_to_right_target_direction</code>. That's what the following function <code>clamp2D</code> does.</p> <pre><code>Vector clamp2D(Vector direction, Vector start, Vector end) {\n    bool is_right = dotProduct(direction, crossProduct(end, [0, 0, -1])) &lt; 0\n    bool is_left = dotProduct(direction, crossProduct(start, [0, 0, -1])) &gt; 0\n\n    if ((dotProduct(end, crossProduct(start, [0, 0, -1])) &gt; 0) ? (is_right &amp;&amp; is_left) : (is_right || is_left))\n        return direction\n\n    if (dotProduct(start, direction) &lt; dotProduct(end, direction))\n        return end\n\n    return start\n}\n</code></pre> <p>You will also have to implement your own dotProduct and crossProduct functions. See here to learn how to find the dot product of two vectors and see here to learn how to find the cross product of two vectors. Many example bots, including the ones for Python and Java, already have vector classes that have implemented this for you!</p> <ul> <li>Similar to integer clamping, clamp2D forces a direction between <code>start</code> and <code>end</code>, such that <code>start</code> \\&lt; <code>direction</code> \\&lt; <code>end</code> in terms of clockwise rotation.</li> <li>Note that this is only in the x-axis and y-axis - clamping the z-axis isn't necessary for this problem.</li> <li>For the math nerds: Why does this work? This function relies on Rocket League's inverted X-axis (positive X is left and negative X is right). See this page for a top-down view of the Rocket League field and different coordinates pertaining to the field.</li> </ul> <p>Now we can use the <code>clamp2D</code> function.</p> <pre><code>Vector direction_of_approach = clamp2D(car_to_ball_direction, ball_to_left_target_direction, ball_to_right_target_direction)\n</code></pre> <p>This is the direction that our bot should approach the ball at.</p>"},{"location":"botmaking/shooting-the-ball-towards-or-away-from-a-target/#ball-location-offset","title":"Ball location offset","text":"<p>Next, we're going to take the ball's radius as well as our direction of approach into account in order to offset our final target from the ball's location.</p> <p>The basis behind this is that we will go in the opposite direction of our direction of approach, and give the direction a magnitude of 92.75 (which is the ball's radius).</p> <pre><code>Vector offset_ball_location = ball_location - (direction_of_approach * 92.75)\n</code></pre>"},{"location":"botmaking/shooting-the-ball-towards-or-away-from-a-target/#aligning-with-the-direction-of-approach","title":"Aligning with the direction of approach","text":"<p>This is where the math gets into approximations. What we need to do is cause the car to slowly circle around <code>offset_ball_location</code> until our direction to the ball matches or is close to <code>direction_of_approach</code> while also getting closer and closer to the target.</p> <pre><code>int side_of_approach_direction = sign(dotProduct(crossProduct(direction_of_approach, [0, 0, 1]), ball_location - car_location))\nVector car_to_ball_perpendicular = normalize(crossProduct(car_to_ball, [0, 0, side_of_approach_direction]))\nVector adjustment = abs(angle(flatten(car_to_ball), flatten(direction_of_approach))) * 2560\nVector final_target = offset_ball_location + (car_to_ball_perpendicular * adjustment)\n</code></pre> <ul> <li>You will need to implement your own sign. This returns -1 if the value is negative, 0 if the value is 0, and 1 if the value is positive.</li> <li>Most languages have their own abs (absolute value) function built-in. See here to learn what absolute value is.</li> <li>You will also need to implement your own flatten and angle functions. Flatten makes the z value of a vector equal to 0. See here to learn how to find the angle between two vectors. Many example bots, including the ones for Python and Java, already have vector classes that have implemented this for you!</li> </ul>"},{"location":"botmaking/shooting-the-ball-towards-or-away-from-a-target/#driving","title":"Driving","text":"<p>Once you have <code>final_target</code>, all you have to do is face it and drive towards it. It will automatically adjust itself as your bot starts moving.</p> <p>If you want to get to the target at a specific time - for example, if you're using the ball prediction - then you need the required speed in order to get to the target at that exact time. This is fairly simple, as we just need to find the distance that we need to travel and divide by the remaining time.</p> <pre><code>double distance_remaining = magnitude(final_target - car_location) // an ESTIMATION of how far we need to drive - this might be spot-on or fairly far off\ndouble time_remaining = intercept_time - current_time\n\ndouble speed_required = distance_remaining / time_remaining\n</code></pre> <p>This also has another benefit: you can easily know whether or not it's possible to reach the target in a given time. If the required speed is greater than 1410 (which is the max speed of a car without boost) or 2300 (if the car does have boost) then it's impossible to reach the target in the given time.</p>"},{"location":"botmaking/team-match-communication-protocol/","title":"TMCP","text":""},{"location":"botmaking/team-match-communication-protocol/#about","title":"About","text":"<p>TMCP stands for the Team Match Communication Protocol. It is an attempt at standardizing inter-bot communication.</p> <p>Currently, the match communication system, or match comms, is only supported by Python bots. See Matchcomms for more information on how to use it.</p> <p>Match comms do not allow for team-only messages. Until this is implemented, TMCP operates on an honor system: a bot should not look at packets from bots on another team.</p>"},{"location":"botmaking/team-match-communication-protocol/#sending-packets","title":"Sending packets","text":"<p>Bots should avoid spamming packets. They should aim for a maximum of 10 packets per second.</p> <p>Only send a packet when something has changed. If you want to refine a time estimate sent in a previous message, only do so if the time difference is &gt; 0.1 seconds.</p>"},{"location":"botmaking/team-match-communication-protocol/#receiving-packets","title":"Receiving packets","text":"<p>Packets will only be received when something has changed. If you haven't received a packet from another bot, assume that nothing has changed.</p>"},{"location":"botmaking/team-match-communication-protocol/#tmcp-10","title":"TMCP 1.0","text":"<p>This is what a packet following TMCP looks like:</p> <pre><code>{\n  \"tmcp_version\": [1, 0],\n  \"team\": int,\n  \"index\": int,\n  \"action\": {\n    \"type\": string,\n    ...\n  }\n}\n</code></pre> <ul> <li> <p><code>tmcp_version</code></p> <ul> <li>Major: Breaking revision number</li> <li>Minor: Non-breaking revision number</li> </ul> </li> <li> <p><code>team</code> - The team of the bot that sent the packet. 0 for blue and 1 for orange. This will be removed once match comms allow for team-only communication.</p> </li> <li> <p><code>index</code> - The index of the bot that sent the packet. If you are using the hivemind, make this the index of the bot which is carrying out the action.</p> </li> <li> <p><code>action</code> - The current action that the bot is taking. This is an object. The types can be seen below.</p> </li> </ul>"},{"location":"botmaking/team-match-communication-protocol/#ball","title":"\"BALL\"","text":"<p>The bot is going for the ball.</p> <pre><code>{\n  \"type\": \"BALL\",\n  \"time\": float,\n  \"direction\": [float, float, float] \n}\n</code></pre> <ul> <li><code>time</code> - Game time that your bot will arrive at the ball. Set to <code>-1</code> if this is unknown.</li> <li><code>direction</code> - Anticipated normalized direction of ball travel AFTER contact is made. <code>[0, 0, 0]</code> for unknown.</li> </ul>"},{"location":"botmaking/team-match-communication-protocol/#boost","title":"\"BOOST\"","text":"<p>The bot is going for boost.</p> <pre><code>{\n  \"type\": \"BOOST\",\n  \"target\": int\n}\n</code></pre> <ul> <li><code>target</code> - Index of the boost pad the bot is going to collect.</li> </ul>"},{"location":"botmaking/team-match-communication-protocol/#demo","title":"\"DEMO\"","text":"<p>The bot is going to demolish another car.</p> <pre><code>{\n  \"type\": \"DEMO\",\n  \"time\": float,\n  \"target\": int\n}\n</code></pre> <ul> <li><code>time</code> - Game time that the bot will demo the other bot. <code>-1</code> for unknown.</li> <li><code>target</code> - Index of the bot that will be demoed.</li> </ul>"},{"location":"botmaking/team-match-communication-protocol/#ready","title":"\"READY\"","text":"<p>The bot is waiting for a chance to go for the ball. Some examples are positioning (retreating/shadowing) and recovering.</p> <pre><code>{\n  \"type\": \"READY\",\n  \"time\": float\n}\n</code></pre> <ul> <li><code>time</code> - The game time when the bot could arrive at the ball (if it was to go for it). <code>-1</code> for unknown.</li> </ul>"},{"location":"botmaking/team-match-communication-protocol/#defend","title":"\"DEFEND\"","text":"<p>The bot is in a position to defend the goal and is not planning to move up. Only use DEFEND if your bot is in place to defend, not if still en-route. If the bot decides to leave the net, signal this using either \"BALL\" (if going for a touch) or \"READY\" (if moving upfield).</p> <p>A bot should use \"DEFEND\" to let its teammates know it is safe to move up a bit without worrying about an open net.</p> <pre><code>{\n  \"type\": \"DEFEND\"\n}\n</code></pre>"},{"location":"botmaking/team-match-communication-protocol/#tmcp-implementations","title":"TMCP Implementations","text":""},{"location":"botmaking/team-match-communication-protocol/#virxerlu","title":"VirxERLU","text":"<p>If you use VirxERLU, your bot automatically sends out TMCP packets. To process incoming ones, add this to your bot in <code>main.py</code>:</p> <pre><code>def handle_tmcp_packet(self, packet):\n    super().handle_tmcp_packet(packet)\n    # process the packet here\n</code></pre> <p>However, you will have to implement your own 'minimum time to ball' function. This is the default:</p> <pre><code>def get_minimum_game_time_to_ball(self):\n    return -1\n</code></pre> <p>It should return -1 if you can't find a shot and the game time of the shot if you could. It should be noted that all shots (except for short_shot) have a property called <code>intercept_time</code> which is the game time that they will intercept the ball at.</p>"},{"location":"botmaking/team-match-communication-protocol/#tmcp-handler","title":"TMCP Handler","text":"<p>Will made a TMCP python package with helper classes that handle everything protocol-related.</p> <p>To install, just do</p> <pre><code>pip install tmcp\n</code></pre> <p>Then you can use it like this:</p> <pre><code>from tmcp import TMCPHandler, TMCPMessage, ActionType\n\nclass MyBot(BaseAgent):\n    def initialize_agent(self):\n        self.tmcp_handler = TMCPHandler(self)\n\n    def get_output(self, packet: GameTickPacket) -&gt; SimpleControllerState:\n        # Receive and parse all new matchcomms messages into TMCPMessage objects.\n        new_messages: List[TMCPMessage] = self.tmcp_handler.recv()\n        # Handle TMCPMessages.\n        for message in new_messages:\n            if message.action_type == ActionType.BALL:\n                print(message.time)\n\n        ...\n\n        # You can send messages like this.\n        self.tmcp_handler.send_boost_action(pad_index)\n\n        # Or you can create them and send them more directly:\n        my_message = TMCPMessage.ball_action(self.team, self.index, estimated_time_of_arrival)\n        self.tmcp_handler.send(my_message)\n</code></pre>"},{"location":"botmaking/team-match-communication-protocol/#tgdsmells-handler","title":"TGDSMELLS Handler","text":"<p>The TGDSMELLS Handler is very similar in usage to Will's TMCP Handler.</p> <p>Can be installed with</p> <pre><code>pip install tgdsmells\n</code></pre>"},{"location":"botmaking/team-match-communication-protocol/#under-the-hood","title":"Under the hood","text":"<p>The following example shows how you could send and receive match comms without a handler. This is shown to give you a better idea of what's going on under the hood. We do still recommend that you use an existing handler instead because it will be up to date and do a lot of error checking for you.</p> <pre><code>from queue import Empty\n\nclass MyBot(BaseAgent):\n    def initialize_agent(self):\n        self.ally_actions = {}\n\n    def receive_coms(self):\n        # Process up to 50 messages per tick.\n        for _ in range(50):\n            try:\n                # Grab a message from the queue.\n                msg = self.matchcomms.incoming_broadcast.get_nowait()\n            except Empty:\n                break\n\n            # This message either isn't following the standard protocol\n            # or is intended for the other team.\n            # DO NOT spy on the other team for information!\n            if \"tmcp_version\" not in msg or msg[\"team\"] != self.team:\n                continue\n\n            # Will's handler checks to make sure the message is valid.\n            # Here we are keeping it as simple as possible.\n\n            # If we made it here we know it's information relevant to our team.\n            # Let's save it in a dictionary for reference later.\n            self.ally_actions[msg[\"index\"]] = msg\n\n    def send_coms(self):\n        # Let's assume that our bot is attacking the ball and aiming for prediction slice 100.\n        outgoing_msg = {\n            \"tmcp_version\": [1, 0],\n            \"team\": self.team,\n            \"index\": self.index,\n            \"action\": {\n                \"type\": \"BALL\",\n                # You'll likely have the ball predictions cached locally.\n                # This implementation is for demonstration purposes only.\n                \"time\": self.get_ball_prediction_struct().slices[100].game_seconds,\n                \"direction\": [0, 0, 0]\n            },\n        }\n        self.matchcomms.outgoing_broadcast.put_nowait(outgoing_msg)\n\n    def get_output(self, packet: GameTickPacket):\n        # Get the latest information from matchcomms.\n        self.receive_coms()\n\n        # Your bot code goes here:\n        ...\n\n        # Ideally you only send out communications when your plans change.\n        # Sending 120 messages a second is just overkill and will eat into the processing time of your allies.\n        # Please take proper precautions to prevent excessive spam.\n        if new_plan != old_plan:\n            self.send_coms()\n\n        return self.controls\n</code></pre>"},{"location":"botmaking/tick-rate/","title":"Tick rate","text":"<p>Bots have a function like <code>get_output(packet)</code> or something similar, depending on language. This gets called some number of times per second, I will refer to this as the tick rate.</p> <p>There are several factors which influence tick rate:</p> <ol> <li>The frame rate of Rocket League. If Rocket League is running at 60 FPS, the tick rate will get capped at 60, regardless of any other settings. Note that enabled VSync also limits FPS.</li> <li>The desired tick rate that you've configured for your bot. Most languages allow you to add an additional cap.</li> <li>The tick rate can never be higher than 120, since this is the rate at which Rocket League simulates its physics.</li> </ol> <p>In other words, the tick rate is <code>min(rocketLeagueFPS, desiredTickRate)</code>. You can see the tick rate you're getting during a game by hitting the 'home' key and looking for a line like <code>ticks: 120.0 tps</code></p> <p>There used to be another factor, the PacketSendRate configuration. There's a file at <code>C:\\Users\\yourname\\Documents\\My Games\\Rocket League\\TAGame\\Config\\TARLBot.ini</code> where you could write down a PacketSendRate, but RLBot now ignores it and sets 240 no matter what, so it's a non-issue.</p>"},{"location":"botmaking/tick-rate/#specifying-desired-tick-rate","title":"Specifying desired tick rate","text":""},{"location":"botmaking/tick-rate/#python","title":"Python","text":"<p>In python, you can update your bot cfg file as seen in this example</p> <p>Python will assume your desired tick rate is 60 unless you override it. This is because TARLBot.ini is 60 by default, so the vast majority of bot makers have been developing and testing with 60.</p>"},{"location":"botmaking/tick-rate/#java","title":"Java","text":"<p>In Java, you can configure your bot manager as seen in this example</p> <p>Java will assume your desired tick rate is 60 unless you override it. This is for the same reason as Python, and also because Java was hard-coded to use 60 for a long time.</p>"},{"location":"botmaking/tick-rate/#net-c","title":".NET / C#","text":"<p>In .NET, you can configure your bot manager as seen in this example</p> <p>Here, 0 means that you wish to have your desired tick rate be unlimited. You may also pass numbers like 60 or 120.</p>"},{"location":"botmaking/tick-rate/#tips","title":"Tips","text":"<ul> <li>You should probably specify a tick rate that divides into 120. Tournaments generally run at 120Hz or 60Hz, and if you specify something weird like 100Hz, your bot will get called at varying intervals to achieve that average.</li> <li>In most languages, your choice of tick rate will not affect the 'freshness' of packets delivered. They should all be very fresh, about 1ms old, when they are delivered to you.</li> <li>If your bot is slow to compute a frame, you will fall behind and potentially miss a frame, since bots generally loop on a single thread. If you desire consistency, you may wish to configure a desiredTickRate that always gives enough time for your bot logic.</li> <li>To consistently give bots the same amount of execution time for every tick, rocket leagues fps should be locked to exactly the tick rate that you want the bots to run at. This is especially important if there are many bots running, for example in a tournament.</li> <li>It is possible to lock the FPS when RLBot is active, and unlock it when you're just playing normally. See the RLBot Specific Game Settings page for instructions on how to do this.</li> </ul>"},{"location":"botmaking/useful-game-values/","title":"Useful game values","text":"<p>If you are making a bot, some of these values are given in FieldInfo. You can find more information on that here.</p> <p>Rocket League is made in Unreal Engine, which means any dimensions will be in unreal units (uu).</p>"},{"location":"botmaking/useful-game-values/#basic-dimensions","title":"Basic Dimensions","text":"<p>WARNING: Note that the X-axis is left and it is not the normal Cartesian layout. Also, yaw is zero at the positive x-axis and increases clockwise. Trig functions work out as usual because the two reversed conventions cancel each other.</p> <p>Rotations are represented as YZX-ordered Euler angles.</p> <p>Note: For scratch divide the values by 32.</p> <p>Rocket League uses a coordinate system (X, Y, Z), where Z is upwards. Note also that negative Y is towards Blue's goal (team 0).</p> <ul> <li>Floor: 0</li> <li>Center field: (0, 0)</li> <li>Side wall: x=\u00b14096</li> <li>Side wall length: 7936</li> <li>Back wall: y=\u00b15120</li> <li>Back wall length: 5888</li> <li>Ceiling: z=2044</li> <li>Goal height: z=642.775</li> <li>Goal center-to-post: 892.755</li> <li>Goal depth: 880</li> <li>Corner wall length: 1629.174</li> <li>The corner planes intersect the axes at \u00b18064 at a 45 degrees angle</li> <li>Wall bottom ramp radius: Aprox. 256 (but they are not circular)</li> </ul> <p>For wall lengths, the curvature at the intersections is ignored.</p> <p></p>"},{"location":"botmaking/useful-game-values/#boost-pads","title":"Boost Pads","text":"<p>Small boost pads:</p> <ul> <li>Hitbox is a cylinder, height of 165uu, radius of 144uu</li> <li>28 in total.</li> <li>Gives 12 boost.</li> <li>Takes 4 seconds to refresh.</li> </ul> <p>Big boost pads:</p> <ul> <li>Hitbox is a cylinder, height of 168uu, radius of 208uu</li> <li>6 in total.</li> <li>Gives 100 boost.</li> <li>Takes 10 seconds to refresh.</li> <li>Positioned at: (\u00b13584, 0, 73) and (\u00b13072, \u00b14096, 73)</li> </ul> <p>A car picks up a boost pad if the car's center of mass (not hitbox) enters the pad's hitbox. This interaction is different when cars are standing still (see the Rocket Science video on boost pad hitboxes)</p> <p>The coordinates of the 34 boost pads (in the order that RLBot uses):</p> <p></p> <pre><code>[    0.0, -4240.0, 70.0] (0)\n[-1792.0, -4184.0, 70.0] (1)\n[ 1792.0, -4184.0, 70.0] (2)\n[-3072.0, -4096.0, 73.0] (3)\n[ 3072.0, -4096.0, 73.0] (4)\n[- 940.0, -3308.0, 70.0] (5)\n[  940.0, -3308.0, 70.0] (6)\n[    0.0, -2816.0, 70.0] (7)\n[-3584.0, -2484.0, 70.0] (8)\n[ 3584.0, -2484.0, 70.0] (9)\n[-1788.0, -2300.0, 70.0] (10)\n[ 1788.0, -2300.0, 70.0] (11)\n[-2048.0, -1036.0, 70.0] (12)\n[    0.0, -1024.0, 70.0] (13)\n[ 2048.0, -1036.0, 70.0] (14)\n[-3584.0,     0.0, 73.0] (15)\n[-1024.0,     0.0, 70.0] (16)\n[ 1024.0,     0.0, 70.0] (17)\n[ 3584.0,     0.0, 73.0] (18)\n[-2048.0,  1036.0, 70.0] (19)\n[    0.0,  1024.0, 70.0] (20)\n[ 2048.0,  1036.0, 70.0] (21)\n[-1788.0,  2300.0, 70.0] (22)\n[ 1788.0,  2300.0, 70.0] (23)\n[-3584.0,  2484.0, 70.0] (24)\n[ 3584.0,  2484.0, 70.0] (25)\n[    0.0,  2816.0, 70.0] (26)\n[- 940.0,  3308.0, 70.0] (27)\n[  940.0,  3308.0, 70.0] (28)\n[-3072.0,  4096.0, 73.0] (29)\n[ 3072.0,  4096.0, 73.0] (30)\n[-1792.0,  4184.0, 70.0] (31)\n[ 1792.0,  4184.0, 70.0] (32)\n[    0.0,  4240.0, 70.0] (33)\n</code></pre> <p>NOTE: Some boost pad locations vary from map to map. It is recommended to use the FieldInfo, if you want to have the correct locations for any map.</p>"},{"location":"botmaking/useful-game-values/#spawn-locations","title":"Spawn Locations","text":"Kickoff Blue Orange Right corner loc: (-2048, -2560), yaw: 0.25 pi loc: (2048, 2560), yaw: -0.75 pi Left corner loc: (2048, -2560), yaw: 0.75 pi loc: (-2048, 2560), yaw: -0.25 pi Back right loc: (-256.0, -3840), yaw: 0.5 pi loc: (256.0, 3840), yaw: -0.5 pi Back left loc: (256.0, -3840), yaw: 0.5 pi loc: (-256.0, 3840), yaw: -0.5 pi Far back center loc: (0.0, -4608), yaw: 0.5 pi loc: (0.0, 4608), yaw: -0.5 pi Demolished Blue Orange Right inside loc: (-2304, -4608), yaw: 0.5 pi loc: (2304, 4608), yaw: -0.5 pi Right outside loc: (-2688, -4608), yaw: 0.5 pi loc: (2688, 4608), yaw: -0.5 pi Left inside loc: (2304, -4608), yaw: 0.5 pi loc: (-2304, 4608), yaw: -0.5 pi Left outside loc: (2688, -4608), yaw: 0.5 pi loc: (-2688, 4608), yaw: -0.5 pi"},{"location":"botmaking/useful-game-values/#elevation-of-objects-at-rest","title":"Elevation of Objects at Rest:","text":"<ul> <li>Ball: 93.15</li> <li>Hybrid: 17.00</li> <li>Octane: 17.01</li> <li>Dominus: 17.05</li> <li>Breakout: 18.33</li> <li>Batmobile/Plank: 18.65</li> </ul> <p>(these may vary slightly)</p> <p>More information on car bodies in this spreadsheet by HalfwayDead.</p>"},{"location":"botmaking/useful-game-values/#physics","title":"Physics","text":"<p>Conversion: 1 uu = 1 cm (e.g. 2778 uu/s = 100 km/h)</p> <ul> <li>Gravity: 650 uu/s^2<ul> <li>\"Low\" mutator: 325 uu/s^2</li> <li>\"High\" mutator: 1137.5 uu/s^2</li> <li>\"Super High\" mutator: 3250 uu/s^2</li> </ul> </li> </ul>"},{"location":"botmaking/useful-game-values/#ball","title":"Ball","text":"<ul> <li>Radius: 91.25 uu</li> <li>Max speed: 6000 uu/s<ul> <li>\"Slow\" mutator: 1500 uu/s</li> <li>\"Fast\" mutator: 9000 uu/s</li> <li>\"Super Fast\" mutator: 15000 uu/s</li> </ul> </li> <li>Mass: 30.0 (unit is arbitrary)</li> <li>Coefficient of restitution: 60% (it loses 40% of the component of its velocity that's toward the surface)</li> <li>Maximum ball angular velocity: 6.0 radians/s</li> </ul>"},{"location":"botmaking/useful-game-values/#car","title":"Car","text":"<ul> <li>Max car speed (boosting): 2300 uu/s</li> <li>Supersonic speed threshold: 2200 uu/s</li> <li>Max driving speed (forward and backward) with no boost: 1410 uu/s</li> <li>Car mass: 180.0 (unit is arbitrary)</li> <li>Boost consumption rate: 33.3/s</li> <li>Boost acceleration:<ul> <li>on the ground: 991.666 uu/s^2</li> <li>in the air: 1058.333 uu/s^2</li> </ul> </li> <li>Acceleration in the ground:<ul> <li>due to throttle: depends on velocity - See smish notes.</li> <li>due to braking (any amount): -3500.0 uu/s^2</li> <li>due to slowing during zero-throttle coasting: -525.0 uu/s^2</li> </ul> </li> <li>Acceleration in the air due to throttle: ~66.667 uu/s^2   (yes, throttling accelerates the car in the air)</li> <li>Jumping</li> <li>Double jump<ul> <li>An instantaneous velocity increase of ~291.667 uu/s in the direction of your roof.</li> </ul> </li> <li>Minimum and maximum rotation (in radians):<ul> <li>Pitch: [-pi/2, pi/2]</li> <li>Yaw: [-pi, pi]</li> <li>Roll: [-pi, pi]</li> </ul> </li> <li>Maximum car angular acceleration:<ul> <li>Yaw: 9.11 radians/s^2</li> <li>Pitch: 12.46 radians/s^2</li> <li>Roll: 38.34 radians/s^2</li> </ul> </li> <li>Maximum car angular velocity: 5.5 radians/s</li> <li>Turning<ul> <li>Turning in Rocket League is very complex and not a lot is known. Hopefully, the numbers below can help you out a bit!</li> <li>Turn radius: https://samuelpmish.github.io/notes/RocketLeague/ground_control/#turning. Python implementation:</li> </ul> </li> </ul> <pre><code>def turn_radius(v):\n    if v == 0:\n        return 0\n    return 1.0 / curvature(v)\n\n# v is the magnitude of the velocity in the car's forward direction\ndef curvature(v):\n    if 0.0 &lt;= v &lt; 500.0:\n        return 0.006900 - 5.84e-6 * v\n    if 500.0 &lt;= v &lt; 1000.0:\n        return 0.005610 - 3.26e-6 * v\n    if 1000.0 &lt;= v &lt; 1500.0:\n        return 0.004300 - 1.95e-6 * v\n    if 1500.0 &lt;= v &lt; 1750.0:\n        return 0.003025 - 1.1e-6 * v\n    if 1750.0 &lt;= v &lt; 2500.0:\n        return 0.001800 - 4e-7 * v\n\n    return 0.0\n</code></pre> <ul> <li>No matter if you're accelerating or decelerating, (as the throttle is 1) the car's turn radius and velocity balance out so the car turns 90 degrees in about 0.775 seconds, 180 degrees in 1.55 seconds, and 360 degrees in 3.1 seconds.</li> <li> <p>Accelerating while turning (starting from a standstill with throttle and steer set to 1)</p> <ul> <li> <p>While turning with steer set to 1 (or -1), the maximum forwards velocity the car can reach is around 1234. It reaches this after 5 seconds.</p> </li> <li> <p>The speed of the car after x time can be estimated with the following equation: <code>1234 * (1 - e ^ [-{time / 0.74704}])</code></p> </li> </ul> <p></p> <p>Example Python implementation:</p> </li> </ul> <pre><code>import math\n\nVMAX = 1234\nTAU = 0.74704\n\ndef get_speed_from_time_turning(time):\n    return VMAX * (1 - math.exp(-(time / TAU)))\n\ndef get_turn_time_from_speed(speed):\n    speed_adj = -(speed / VMAX - 1)\n    return -math.log(speed_adj, math.e) * TAU\n</code></pre> <ul> <li> <p>Decelerating while turning (starting from the top speed with throttle and steer set to 1)</p> <ul> <li> <p>While turning with steer set to 1 (or -1), the minimum forward velocity the car can reach is around 1234. It reaches this after 7.5 seconds.</p> </li> <li> <p>The speed and time can both be estimated with linear piecewise functions. The blue lines is the real velocity, and the orange line is the velocity that is predicted by the piecewise.</p> </li> </ul> <p></p> <p>Example Python implementation:</p> </li> </ul> <pre><code>def get_speed_from_time_turning(time):\n    if time &gt;= 7.5:\n        return 1234\n\n    if time &gt;= 4.5:\n        return 1272.889 - 5.185 * time\n\n    if time &gt;= 4:\n        return 1380 - 27.5 * time\n\n    if time &gt;= 3.2:\n        return 1530 - 65 * time\n\n    if time &gt;= 2.6:\n        return 1743.333 - 131.667 * time\n\n    if time &gt;= 1.3:\n        return 2247 - 325.384615 * time\n\n    if time &gt;= 0.3:\n        return 2344 - 400 * time\n\n    if time &gt;= 0.1:\n        return 2323 - 330 * time\n\n    if time &gt; 0:\n        return 2300 - 100 * time\n\n    return 2300\n\ndef get_time_turning_from_speed(speed):\n    if speed &lt;= 1234:\n        return 7.5\n\n    if speed &lt;= 1248:\n        return 245.4857 - 0.192857 * speed\n\n    if speed &lt;= 1270:\n        return 50.18 - 0.03636 * speed\n\n    if speed &lt;= 1322:\n        return 23.53846 - 0.01538 * speed\n\n    if speed &lt;= 1401:\n        return 13.24 - 0.007595 * speed\n\n    if speed &lt;= 1824:\n        return 6.9 - 0.00307 * speed\n\n    if speed &lt;= 2224:\n        return 5.86 - 0.0025 * speed\n\n    if speed &lt;= 2290:\n        return 7.039 - 0.00303 * speed\n\n    if speed &lt;= 2300:\n        return 23 - 0.01 * speed\n\n    return 0\n</code></pre>"},{"location":"community/air-show/","title":"Air show","text":""},{"location":"community/air-show/#summary","title":"Summary","text":"<p>Rocket League, Music, and Programming: It all comes together in the 2021 Rocket League Air Show, hosted by Rocket Sledge!</p> <p>The best bot choreography presentation will win $1000! Open to both team and solo entries. The bar has been set high by the original video in February 2020. What will you do to rise above the rest and earn the viewers' votes?</p>"},{"location":"community/air-show/#dates","title":"Dates","text":"<p>February 15th: Check-in and progress report with Sledge. At this time we may be able to indicate how many spots are available for the video and even confirmation of your entry (based on quality and progress).</p> <p>March 15th: Full Submission due.</p> <p>Video: Youtube</p>"},{"location":"community/air-show/#getting-started","title":"Getting Started","text":"<p>Tutorial: Youtube</p> <p>You can chat / get help / form teams in the special air show discord channel.</p>"},{"location":"community/air-show/#previous-years-submissions","title":"Previous year's submissions","text":"<p>The code from last year's entries is open source!</p>"},{"location":"community/air-show/#2020","title":"2020","text":"<ul> <li>Scripted</li> <li>_Fool_</li> <li>Awakening</li> </ul> <p>You shouldn't lift entire scenes, but feel free to borrow code and concepts.</p>"},{"location":"community/air-show/#getting-help","title":"Getting Help","text":"<ul> <li>Ask questions on the RLBot #air-show chat room</li> <li>We've heard interest from a few video editing experts, you might be able to team up! Check in the chat room.</li> <li>The folks at the Rocket League Mapmaking Discord might want to collaborate if you have a cool idea.</li> <li>You can watch the teams from previous years talking shop about what worked and what didn't:</li> </ul> <p>2020: https://www.youtube.com/watch?v=4oMdXBO9I3A 2021: TBA</p>"},{"location":"community/air-show/#rules","title":"Rules","text":"<p>You may enter solo or as a team.</p> <p>In order to win, you must be one of Sledge's personal picks to include in the showcase video on his channel, and then within that group, you must get the most votes from viewers via a google form, similar to the one from last year.</p> <p>All music must be sourced from Epidemic Sound ONLY. You can create a month long trial account and download your music here: https://www.epidemicsound.com/subscriptions/choose/. Music outside of this service will not be permitted even if it is \u201ccopyright free\u201d. Epidemic sound has an amazing search filter and every genre of music. It is the same music service used by almost every major RL Youtuber.</p> <p>Participation or inclusion in the video is not guaranteed at this point. Quality is important, refer to the original video as an example of what we are looking for. The first goal is to have a basic idea in progress by the February 15th check in date.</p> <p>No part of your entry may be shared or posted until Sledge's showcase video has been live for at least 2 weeks. Going forward you are also agreeing that Sledge may use parts of your entry in future videos and promotions. Also you entry will most likely be stolen and posted to tiktok multiple times... welcome to the internet!</p> <p>Please save test replay files and bloopers for possible inclusion in secondary video.</p> <p>You are welcome to use \"state setting\" to teleport cars / make them move unnaturally. Some viewers last year loved stuff like that, some thought it was cheap, up to you how you want to chase those votes.</p> <p>Also fine to use custom maps / any other mods.</p>"},{"location":"community/air-show/#prizes","title":"Prizes","text":"<ul> <li>1st = $1000</li> <li>2nd = TBD</li> <li>3rd = TBD</li> </ul>"},{"location":"community/community-guidelines/","title":"Community guidelines","text":""},{"location":"community/community-guidelines/#social-conduct","title":"Social Conduct","text":"<ul> <li>No harassment</li> <li>Be inclusive (no racism, sexism, etc)</li> <li>Keep everything safe-for-work</li> </ul>"},{"location":"community/community-guidelines/#discord","title":"Discord","text":"<p>Most communication happens on our discord</p>"},{"location":"community/community-guidelines/#code-of-conduct-for-mods","title":"Code of conduct for mods","text":"<ul> <li>Protect people from harassment and spam using the minimum required force.</li> <li>De-escalate conflicts, and don't engage in tense arguments.</li> <li>Employ yes-and whenever possible.</li> <li>No power-tripping, no undue influence over people's projects. Be a servant.</li> </ul>"},{"location":"community/community-guidelines/#roles","title":"Roles","text":"<p>Discord users can be assigned roles, which is useful for granting privileges to different groups of people, contacting them all at once, etc.</p>"},{"location":"community/community-guidelines/#tournament-roles","title":"Tournament Roles","text":"<p>Roles are awarded based on your placement in the latest official tournament. The current roles are Champion, Top 4, Top 8, and Top 16. These roles are permenant, however only the ones from the latest tournament will be colored and displayed seperately from the RLBot member list.</p>"},{"location":"community/community-guidelines/#competition","title":"Competition","text":"<p>We regularly run tournaments and other events where bots get ranked and programmers get kudos. The specific rules of each event are generally up to the organizer, but here are a few guidelines to promote fairness:</p>"},{"location":"community/community-guidelines/#record-the-matches","title":"Record the matches","text":"<p>When playing for rank, you should have some kind of stream or recording that people can view and see that the match was played fairly.</p>"},{"location":"community/community-guidelines/#make-sure-your-opponent-is-healthy","title":"Make sure your opponent is healthy","text":"<p>It's nice to make sure an opponent is working as designed and you have the latest version before playing against it for rank</p> <ul> <li>If possible, ask the author before the match.</li> <li>If you don't get pre-approval, and they ask you afterward to make the match not count for rank because their bot was broken by something outside their control, the community is likely to respect those wishes.</li> <li>As a bonus, it's nice to press the [home] key at some point to show bot performance stats. This helps to show that your computer is running the bots at full strength.</li> </ul>"},{"location":"community/community-guidelines/#make-it-known-when-you-borrow-code","title":"Make it known when you borrow code","text":"<p>Using code from other people with permission is good, as long as you make it publicly known. Many people give more praise to bots that they believe are made from scratch.</p> <ul> <li>If there's reasonable suspicion that you secretly copied lots of another bot, you may be asked to show your source code to some moderators before entering ranked events.</li> <li>If they find that there is copied code, there must be a public disclosure before entering the event.</li> </ul>"},{"location":"community/community-guidelines/#the-fork-rule","title":"The Fork Rule","text":"<p>If you forked your bot from a publicly recognized bot utility package, the fork rule doesn't apply to you.</p> <p>If you fork a bot (except for a tutorial bot), your bot is in fork mode, which means:</p> <ul> <li>You can't enter league play or official tournaments or ranked games on braacket.com.</li> <li>You must give your bot a name that makes it clear you're a fork (small events might choose to allow fork-mode competitors). The name should be formatted as \u201cYourBot [OriginalBot]\u201d.</li> <li>Your bot must remain open source.</li> </ul> <p>This gives proper attribution, and helps the community keep track. You can escape from fork mode by demonstrating to the community (judged by the discord moderator team) that your bot is unique enough to compete under its own name.</p>"},{"location":"community/rlbot-pack/","title":"RLBot Pack","text":"<p>The RLBotPack is a repository holding frequently requested bots in one convenient place. The main intended users are people joining the discord looking for a fun bot to try out. It may also be useful as a way for people running streams to get an up-to-date version of your bot.</p> <p>To be a part of the pack, you just need to create a pull request with your bot to the repository.</p> <p>To qualify:</p> <ul> <li>Your bot must be capable of auto-run<ul> <li>Use Python or Rust? You're all set.</li> <li>Other languages? We have a Java wiki, a C# wiki and a Scratch video.</li> </ul> </li> <li>Your bot must not have any crazy external requirements (except for very common ones like Java or Google Chrome)</li> <li>You must be willing to trim out any extra bot configs from your folder that people wouldn't care about</li> <li>Obey the guidelines</li> <li>If you join the bot pack, people will be free to play against you for rank in the braacket league whenever they want!</li> </ul> <p>After you create the pull request, somebody will come along, review your bot and eventually merge it to the pack.</p>"},{"location":"community/rlbot-pack/#pull-request-tips","title":"Pull Request Tips","text":"<ul> <li>If you're uploading the files via GitHub, please make sure you're not uploading useless files like <code>__pycache__</code>, because the web upload bypasses <code>.gitignore</code>.</li> </ul>"},{"location":"community/rlbot-pack/#updating-an-existing-bot","title":"Updating an existing bot","text":"<p>It's very common for people's forked repository to get out of sync with the central RLBot/RLBotPack, and then when you make a pull request there's a bit of a mess. Here's a strategy for avoiding that:</p> <ol> <li>Make sure you have latest information from the central repo</li> </ol> <pre><code>git remote add rlbot-origin https://github.com/RLBot/RLBotPack.git\ngit fetch rlbot-origin\n</code></pre> <ol> <li>Pick a branch name for your change, e.g. my-new-change</li> </ol> <pre><code>git checkout -b my-new-change rlbot-origin/master\n</code></pre> <ol> <li>Make your changes, e.g. you may be copying / overwriting files in your bot folder.</li> <li>Make a commit and push it to your forked repo.</li> </ol> <pre><code>git add .\ngit commit -m \"My new change.\"\ngit push origin my-new-change\n</code></pre> <ol> <li>Visit your forked repo on github.com and create a pull request from the new branch.</li> </ol>"},{"location":"community/rocket-league-story-mode/","title":"Rocket league story mode","text":""},{"location":"community/rocket-league-story-mode/#playing-rocket-league-story-mode","title":"Playing Rocket League Story Mode","text":"<p>To get started with Story Mode, install RLBotGUI.</p> <p>Once installed, go to Add-&gt;Download Botpack to download the community's bots. Once they are downloaded you can click on \"Story Mode\" on the top right.</p>"},{"location":"community/rocket-league-story-mode/#upgrades-and-teammates","title":"Upgrades and Teammates","text":"<p>After you win a challenge, you get rewarded 1 currency. You can use it to purchase upgrades or recruit an available teammate. After you win all challenges in a city, all opponents from that city become available to recruit.</p> <p>Some matches require you to have teammates. If you don't have enough teammates and no currency, then you can play previous matches to earn some more currency.</p>"},{"location":"community/rocket-league-story-mode/#choosing-difficulty","title":"Choosing Difficulty","text":"<p>When you start Story Mode, you can choose your difficulty between easy, default and custom.</p> <ul> <li>Easy is best for gold/plat players</li> <li>Default is best for diamond/champ players</li> </ul> <p>Custom allows you to provide a JSON file that is used as the story configuration. This is what the default configurations looks like.</p> <p>Here are some example custom configurations:</p> <ul> <li>Psyonix-only bots: Best for bronze/silver players who find the default bots too difficult</li> <li>No teammates/Unfair: Best for players who find \"default\" configuration too easy or find bot teammates annoying.</li> </ul>"},{"location":"community/rocket-league-story-mode/#creating-custom-configurations","title":"Creating Custom Configurations","text":"<p>This is the actual story configuration used in Story Mode so you can use that as a reference to create your own custom configuration.</p> <p>Note that custom configurations doesn't allow you to change what the map looks like, name of the cities and how many cities there are. The rest is all customizable.</p> <p>If you are interested in only changing the \"feel\" of the story without changing any of the challenges then you can update the \"description.message\" for each city and \"challenges.display\" for each challenge. These are the text items shown to the user.</p> <p>If you actually want to change the challenges, then you can add/remove/modify the challenges for each city. Here are the fields that are supported for a challenge object:</p> field meaning id Usually CITY-# format, just has to be unique across the config humanTeamSize opponentBots List containing keys to bot ids (either in the bots section or base-bots.json) map Rocket League arena to play in display Text to show to the user about this challenge max_score Optional. If set, it will set the maximum goals mutator so only few values are allowed disabledBoost Optional. If true, the map is set with no boost so no one will have boost completionConditions Optional. More details below. limitations Optional. List that can contain: \"half-field\". This maps to heatseeker mode <p><code>completionConditions</code> is an object. If multiple fields are provided, each condition is \"and\"-ed with the other conditions. A user completes a challenge if all of them are true. The default condition is that a player must win.</p> <pre><code>{\n  \"win\": true, //set to false if you don't care,\n  \"scoreDifference\": 3 //player must win by at least this much\n  \"selfDemoCount\": 0 //player must not get demoed more than this\n  \"demoAchievedCount\": 2 //player must at least demo opponents this many time\n}\n</code></pre>"},{"location":"community/tips-for-running-tournaments/","title":"Tips for running tournaments","text":""},{"location":"community/tips-for-running-tournaments/#announcing-the-tournament","title":"Announcing the Tournament","text":"<p>Normally tournament organizers will publish some kind of rules document. Google docs has been popular for that so far. Consider including the following:</p> <ul> <li>Tournament format</li> <li>Submission deadline(s)</li> <li>How to submit (upload to google drive folder is a popular technique)</li> <li>Stream time and twitch channel</li> <li>Your intended tick rate (read and understand Tick Rate)</li> <li>Whether or not hive mind style bots are allowed</li> </ul> <p>Here's an example document</p>"},{"location":"community/tips-for-running-tournaments/#gathering-submissions","title":"Gathering Submissions","text":""},{"location":"community/tips-for-running-tournaments/#python-bot-requirements","title":"Python Bot Requirements","text":"<p>People generally just send their whole bot folder, and that works well.</p>"},{"location":"community/tips-for-running-tournaments/#net-c-bot-requirements","title":".NET / C# Bot Requirements","text":"<p>Direct people to Tournament-Submissions, and also encourage them to do Auto Launching</p>"},{"location":"community/tips-for-running-tournaments/#java-bot-requirements","title":"Java Bot Requirements","text":"<p>Direct people to Tournament Submissions. If they follow those instructions, you'll be given a nice zip file with a README inside it.</p> <p>Also encourage them to do this, it'll make your life much easier</p>"},{"location":"community/tips-for-running-tournaments/#scratch-bot-requirements","title":"Scratch Bot Requirements","text":"<p>People who program their bots in Scratch should submit their whole folder.</p> <p>Scratch program (sb3) requirements</p> <ul> <li>All the tournament code should be in the player 1 sprite.</li> <li>Clicking the green flag should be the only thing necessary to start your program.</li> </ul> <p>CFG file requirements</p> <pre><code>headless = True\nseparate_browsers = True\npretend_blue_team = True\n</code></pre>"},{"location":"community/tips-for-running-tournaments/#deadline-management","title":"Deadline Management","text":"<p>It's a good idea to set a bot submission deadline at least 24 hours before the start of the tournament stream. This will give you an opportunity to test all the bots.</p> <p>Encourage early submissions so you can get a head-start on testing, and allow people edit their submission up until the deadline. If you feel confident from your pre-deadline testing that you'll be able to run most of the bots with no issues, consider giving an extension on the deadline--many people will need one.</p>"},{"location":"community/tips-for-running-tournaments/#pre-tournament-bot-testing","title":"Pre-Tournament Bot Testing","text":"<p>You should test all the bots beforehand.</p> <ul> <li>Do they start successfully?</li> <li>Do they have any obvious behavior problems that might be a problem with your setup?<ul> <li>Feel free to check with the bot maker about the expected behavior.</li> </ul> </li> <li>Do they run properly on both blue and orange team? Consider running test matches of each bot vs itself.</li> <li>Are the C#/Java bots running on different ports? Each C# and Java bot must run on a separate port from the rest of the bots.</li> </ul>"},{"location":"community/tips-for-running-tournaments/#running-bots","title":"Running Bots","text":""},{"location":"community/tips-for-running-tournaments/#net-c-bots","title":".NET / C# Bots","text":"<ul> <li>In the ideal case, if they followed Auto Launching successfully, you will only need to load the cfg file like you would for a Python bot.</li> <li>Otherwise, you will need to locate the .exe file in the submission and run it manually. The RLBot framework output will hint about this.</li> <li>Make sure the bot's port is different from the rest of the bots.</li> </ul>"},{"location":"community/tips-for-running-tournaments/#java-bots","title":"Java Bots","text":"<p>Prerequisite: You will need to have the Java Runtime Environment (JRE) installed. You are likely to need the latest one (Java 11 at time of writing) in case any of the botmakers compiled with it.</p> <p>You hopefully received a zip file for each bot. Extract it somewhere and consult the README.</p> <ul> <li>In the ideal case, if they followed Auto Launching Java successfully, you will only need to load the cfg file like you would for a Python bot.</li> <li>Otherwise, you will need to locate the .bat file associated with the Java portion of their bot and run it manually. The RLBot framework output will hint about this.</li> <li>Make sure the bot's port is different from the rest of the bots.</li> </ul> <p>If you run into any trouble, consult this video</p>"},{"location":"community/tips-for-running-tournaments/#scratch-bots","title":"Scratch Bots","text":"<p>All recently-created Scratch bots should auto start with no issues, BUT often the process takes a while. Consider pausing the match until you see something like \"received first input from scratch bot\" in the console.</p> <p>If the bot is very old and does not auto run, they may need to do this</p>"},{"location":"community/tips-for-running-tournaments/#streaming-and-casting","title":"Streaming and Casting","text":""},{"location":"community/tips-for-running-tournaments/#co-casters","title":"Co-casters","text":"<p>If you want to invite others to do commentary with you, you'll need to:</p> <ul> <li>Give them a real-time view of the action so they can comment on things as they happen.</li> <li>Get the sound of their voice flowing through your system audio.</li> </ul> <p>A good way to do this is to start a Discord call and share your screen. If you have internet bandwidth or CPU constraints, make sure you share your screen at a low framerate and / or low resolution.</p>"},{"location":"community/tips-for-running-tournaments/#diagnostics","title":"Diagnostics","text":""},{"location":"community/tips-for-running-tournaments/#bot-response-rate","title":"Bot Response Rate","text":"<p>You can hit the [home] key to start rendering bot response rates in the upper left corner of Rocket League. You'll see a percentage that indicates how many of the rendered frames in Rocket League received fresh control inputs from a given bot.</p> <ul> <li>If you have capped your framerate at 60fps, then you should expect to see 100% for all bots if they are performing well. - If your framerate is higher than 60, you will see percentages lower than 100 for some languages, and that's OK.</li> <li>If you ever see a percentage above 100, that's a big concern. It may mean that there are multiple bot processes trying to control the same player. Make sure bots from the previous match are truly dead.</li> </ul>"},{"location":"community/tips-for-running-tournaments/#running-the-tournament","title":"Running the tournament","text":""},{"location":"community/tips-for-running-tournaments/#bracket","title":"Bracket","text":"<p>All our bots are in their own league on Braacket on which you can also create tournaments with most formats. You can also use your own site of preference or own local program which looks more graphically pleasing. But it's recommended to keep your bracket updated during the tournament so people don't lose track.</p>"},{"location":"community/tips-for-running-tournaments/#things-to-do-in-between-games","title":"Things to do in between games","text":"<ul> <li>Make sure the FPS is capped at the desired number (maybe 120)</li> <li>Don't forget to press 'H' when the games start, so the remove the useless HUD</li> <li>Try to check twitch/discord in case there is something wrong and do not be afraid to restart a match</li> <li>Have fun!</li> </ul>"},{"location":"framework/architecture/","title":"Architecture","text":""},{"location":"framework/architecture/#startup","title":"Startup","text":""},{"location":"framework/architecture/#bots","title":"Bots","text":""},{"location":"framework/architecture/#python-bot","title":"Python Bot","text":""},{"location":"framework/architecture/#java-bot","title":"Java Bot","text":""},{"location":"framework/architecture/#diagram-source-code","title":"Diagram Source Code","text":"<p>Created at sequencediagram.org with:</p> <pre><code>title RLBot Startup Sequence\n\n\n[-&gt;Python: start match on map x with bots [y, z]\nbox over Python: Start RLBot.exe\nbox over Python: Start Rocket League\nparallel\nPython-&gt;DLL: start match on map x with cars [y, z]\nDLL-&gt;RLBot.exe: start match on map x with cars [y, z]\nRLBot.exe -&gt; Rocket League: start match on map x\nparallel off\nRLBot.exe -&gt; Rocket League: spawn cars\nbox over RLBot.exe,Rocket League:Continuous sync\n\nparallel\nPython-&gt;DLL: poll for game tick packet\nDLL-&gt;RLBot.exe: poll for game tick packet\nparallel off\nparallel\nRLBot.exe-&gt;DLL: packet with active match\nDLL-&gt;Python: packet with active match\nparallel off\nbox over Python:Launch bot processes y and z,\\ninforming each of their index\n</code></pre> <pre><code>title RLBot Python Bot\n\n\n[-&gt;Python BotManager: start up with index n\nPython BotManager-&gt;Python Bot:construct with index n\nparallel \nPython BotManager-&gt;DLL: poll for game tick packet\nDLL-&gt;RLBot.exe: poll for game tick packet\nparallel off\nparallel\nRLBot.exe-&gt;DLL: game tick packet\nDLL-&gt;Python BotManager: game tick packet\nparallel off\nPython BotManager-&gt;Python Bot: get_output()\nPython Bot-&gt;Python BotManager: SimpleControllerState\nparallel\nPython BotManager-&gt;DLL: send controls\nDLL-&gt;RLBot.exe: send controls\nparallel off\n</code></pre>"},{"location":"framework/console-commands/","title":"Console commands","text":""},{"location":"framework/console-commands/#sending-a-console-command","title":"Sending a Console Command","text":"<p>To send a console command from a python bot, e.g. <code>Stat FPS</code>, you would do this:</p> <pre><code>from rlbot.utils.game_state_util import GameState\n\n# other code ...\n\ngame_state = GameState(console_commands=[\"Stat FPS\"])\nself.set_game_state(game_state)\n</code></pre> <p>Other languages are not supported yet.</p>"},{"location":"framework/console-commands/#known-console-commands","title":"Known Console Commands","text":"<p>All of these are confirmed to work as intended. Please add more as you find them!</p> <ul> <li><code>QueSaveReplay</code> - Creates a replay keyframe and causes a replay to be saved at the end of the match.</li> <li><code>Set WorldInfo WorldGravityZ 0.0000001</code> - Zero gravity (pretty much). Setting to 0 returns it to default.   You can also use state setting to set gravity.   Warning: Sending this command every frame will likely make your game lag!</li> <li><code>Set WorldInfo TimeDilation 3</code> - Speeds up the game by 3 times. Can also be used to slow down the game   with a number between 0 and 1. You can also use state setting   to set game speed.</li> <li><code>Stat FPS</code> - Turns on a little in-game FPS counter. Can be turned back off with <code>Stat FPS 0</code></li> <li><code>ShowDebug PHYSICS</code> - Nice little text readout which shows you some values, and also the names of some   specific classes/attributes that you can use <code>Set</code> on.</li> <li><code>Pause</code> - Pauses the game. Send <code>Pause</code> to unpause the game. <code>get_output</code>/<code>GetOutput</code>/<code>getOutput</code> will   still be called when the game is paused. This pause is the same as the pause when Escape is pressed.</li> <li><code>ViewAutoCam</code> - This will set the camera to auto-cam mode.</li> <li><code>ViewDefault</code> - Go to the default director camera mode.</li> <li><code>ViewPlayer &lt;team index&gt; &lt;player index&gt;</code> To go a specific player POV - e.x. <code>ViewPlayer 0 2</code> to view   the third player on blue and <code>ViewPlayer 1 2</code> to view the third player on orange.</li> <li><code>CycleHUD</code> - The equivalent of pressing <code>H</code> to cycle through the HUD options.</li> <li><code>CycleCamera</code> - Goes to the next camera view. For example, <code>ViewAutoCam</code> and then <code>CycleCamera</code> puts the   camera into the free-flying mode.</li> </ul>"},{"location":"framework/console-commands/#research-for-more-console-commands","title":"Research for More Console Commands","text":"<p>Try some of these!</p> <p>https://www.reddit.com/r/RocketLeagueMods/comments/4vuj0h/list_of_available_console_commands/</p>"},{"location":"framework/operating-system-support/","title":"Operating system support","text":""},{"location":"framework/operating-system-support/#windows","title":"Windows","text":"<p>RLBot was originally made for Windows, so Windows has the best support. Users are encouraged to watch this video to get started quickly with RLBotGUI!</p>"},{"location":"framework/operating-system-support/#linux","title":"Linux","text":"<p>RLBot v4 only runs on Linux with the old native Linux version of Rocket League. This version is only available on Steam. There is a (probably outdated) install script here.</p> <p>If you only have the Epic version of the game or you want to run the Proton version, you're unfortunately out of luck. This is due to libRLBotInterface.so being broken on Linux.</p>"},{"location":"framework/operating-system-support/#mac","title":"Mac","text":"<p>Mac support is currently unknown and may not work. If you want to try, see the instructions below.</p>"},{"location":"framework/operating-system-support/#instructions","title":"Instructions","text":"<ol> <li>Make sure you have Python 3.11 and pip</li> <li>Run these commands</li> </ol> <pre><code>python3 -m pip install --user --upgrade pip\npython3 -m pip install --user gevent eel\npython3 -m pip install --user --upgrade rlbot rlbot_gui\npython3 -c \"from rlbot_gui import gui; gui.start()\"\n</code></pre>"},{"location":"framework/psyonix-api-notes/","title":"Psyonix api notes","text":"<p>Hello everyone! We're proud to announce that the Psyonix bot API has finally been integrated into RLBot! We hope you're just as excited as we are about this milestone! \ud83c\udf89</p>"},{"location":"framework/psyonix-api-notes/#details","title":"Details","text":"<p>Check out this diagram to get some intuition for this migration. Everything on the left staying the same or as close to the same as possible, so your bots are expected to keep working with no changes required!</p> <p></p>"},{"location":"framework/psyonix-api-notes/#what-you-can-expect-from-this-new-version-of-rlbot-v4","title":"What you can expect from this new version of RLBot (v4)","text":"<p>We're aiming for a backwards compatibility with this first bot API release, so expect your bots to play almost exactly like they used to!</p> <ul> <li>The renderer now has occlusion, so 3D lines disappear behind objects correctly!</li> <li>You can still use state setting, except:<ul> <li>Can\u2019t manipulate boost pads</li> <li>Can\u2019t mess with the car\u2019s jump state</li> <li>Can\u2019t provide partial location / velocity, must fully specify</li> </ul> </li> <li>The GameTickPacket will have all the same data except:<ul> <li>It will have non-interpolated values straight from the physics engine, same as RigidBodyTick!</li> <li>Latest ball touch will always be blank for now (fixed)</li> <li>Boost respawn timers don't work yet</li> </ul> </li> <li>Unfortunately, quick chat is not supported yet (1/2 fixed)</li> <li>We only support Soccar, exhibition mode at the moment. (More modes are supported)</li> <li>The game data will currently update in memory at 60Hz, ~~regardless of Rocket League's frame rate~~ (anecdotally it seems to be capped at the frame rate). We may be able to tune that later. (We now have 120hz)</li> <li>The Psyonix API itself and the code that interfaces with it directly are closed source at the moment.</li> </ul>"},{"location":"framework/psyonix-api-notes/#what-you-can-look-forward-to-in-the-future","title":"What you can look forward to in the future","text":"<ul> <li>No more breaking after updates! Since RLBot no longer relies on DLL injection, RLBot will continue to work after every Rocket League update.</li> <li>LAN support is a possibility in the future. With a virtual LAN (VLAN), this could mean being able to play against bots on different machines over the internet, with your friends!</li> <li>Support for Linux and macOS is planned! (C++ and C# bots won't work)</li> <li>Rumble support is planned. Bots will be able to take part in the mayhem! (Done)</li> <li>Unrelated to the API:<ul> <li>DomNomNom is working on a team communication system for bots. (Done)</li> <li>Chip is working on advanced pathfinding for bots.</li> </ul> </li> </ul>"},{"location":"framework/psyonix-api-notes/#regarding-bugs","title":"Regarding Bugs","text":"<p>This is a lot buggier than a normal release--RLBot broke due to a Rocket League patch and we chose to move forward with the official API rather than fix our old injection technique. Sorry for the bugs / missing features!</p> <p>Please test out your bots and report any bugs to #issues-and-bugs or the GitHub repository's Issues page: https://github.com/RLBot/RLBot/issues. We appreciate all the help we can get!</p> <p>List of Busted Bots</p> <ul> <li>NV Derevo, on some computers</li> </ul>"},{"location":"framework/psyonix-api-notes/#rollback-instructions","title":"Rollback Instructions","text":"<p>If it's a serious problem for you, you can roll back your Rocket League and use our old 1.14.12 version. Note that while you're on the old Rocket League, you will be unable to play online!</p> <p>You can do it by clicking steam://nav/console and then entering <code>download_depot 252950 252951 6062228629972172324</code>. Then read https://www.reddit.com/r/Steam/comments/611h5e/guide_how_to_download_older_versions_of_a_game_on/ starting with step 7.</p> <p>And then, once you're done with that, you'll need to pin your rlbot version to 1.14.12. If you're using the old GUI, you can accomplish that by changing this line https://github.com/RLBot/RLBotPythonExample/blob/master/requirements.txt#L3 to <code>rlbot==1.14.12</code>.</p> <p>If you're using the new colorful RLBotGUI, you'll need to go find rlbot-requirements.txt in the vicinity of <code>C:\\Users\\yourname\\AppData\\Local\\RLBotGUI\\rlbot-requirements.txt</code> and do the change there.</p>"},{"location":"framework/psyonix-api-notes/#thanks","title":"Thanks","text":"<p>Thank you to everyone for sticking with the community! Of course, a massive thank you to Psyonix for supporting us and giving us the API! We can't wait to see RLBot evolve further!</p>"},{"location":"framework/sockets-specification/","title":"Sockets specification","text":"<p>Sockets are currently available with Windows and Mac support only. Linux coming soon.</p> <p>You can use https://github.com/RLBot/RLBot/tree/master/src/main/cpp/RLBotInterface/src as a reference implementation in c++.</p>"},{"location":"framework/sockets-specification/#data-format","title":"Data Format","text":"<p>Unless otherwise specified, data is sent and received on the socket in this format:</p> <ul> <li>First two bytes are an integer (big-endian) which specifies the data type (see list below).</li> <li>Next two bytes are an integer (big endian) which specifies the number of bytes in the payload.</li> <li>Remaining bytes are a payload. The logic for parsing it will depend on the data type, but generally it will be binary data in flatbuffer format. Using tools provided by Google (i.e. flatc.exe) and rlbot.fbs you can auto-generate code in various languages suitable for writing / parsing the payload data.</li> </ul>"},{"location":"framework/sockets-specification/#data-types","title":"Data Types","text":"<p>Types expected to flow from RLBot to the client are in bold. Some are bi-directional.</p> <ol> <li>Game tick packet (arrives at a high rate according to /Tick-Rate except \"desired tick rate\" is not relevant here)</li> <li>Field info (sent once when a match starts, or when you first connect)</li> <li>Match settings (sent once when a match starts, or when you first connect)</li> <li>Player input</li> <li>Actor mapping data (deprecated, related to Remote RLBot)</li> <li>Computer id (deprecated, related to Remote RLBot)</li> <li>Desired game state</li> <li>Render group</li> <li>Quick chat</li> <li>Ball prediction (sent every time the ball diverges from the previous prediction, or when the previous prediction no longer gives a full 6 seconds into the future).</li> <li>Ready Message (clients must send this after connecting to the socket)</li> <li>Message Packet: List of messages, having one of the following types:<ul> <li>PlayerStatEvent - Event when a player performs an action or earns an accolade recognized in statistics, e.g. BicycleHit, HatTrick, MostBoostPickups.</li> <li>PlayerSpectate - Spectator camera is now focusing on a new player.</li> <li>PlayerInputChange - Human or bot has touched their controller, e.g. turned on boost, changed steering, etc.</li> </ul> </li> </ol>"},{"location":"framework/sockets-specification/#connecting","title":"Connecting","text":"<p>Prerequisites (handled automatically by RLBotGUI / the RLBot framework):</p> <ul> <li>Rocket League must be running under the <code>-rlbot</code> flag.</li> <li> <p>RLBot.exe must be running. After it successfully connects to Rocket League, it will start listening on TCP port 23234.</p> </li> <li> <p>As a client, connect to TCP port 23234. Note: please expect to receive the port as a parameter in the future rather than hard coding</p> </li> <li>Send a 'ready' message, as defined here. Be sure to use the data format explained above (two bytes for data type, two bytes for size...)</li> </ul> <p>Some attributes in the ready message are not used yet. Once you're connected, you will start receiving data on the socket, with one of the data types specified above.</p>"},{"location":"framework/sockets-specification/#sending-data","title":"Sending Data","text":"<p>Send data to the same TCP socket, using the same format (two bytes for type, two bytes for size). You can send match settings (starts a new match), player input, desired game state, render group, and quick chat.</p> <p>Consult google.github.io/flatbuffers to learn how to construct the byte array for your payload in the language of your choice.</p>"},{"location":"framework/sockets-specification/#client-libraries","title":"Client Libraries","text":""},{"location":"framework/sockets-specification/#python","title":"Python","text":"<ul> <li>https://github.com/RLBot/RLBot/tree/master/src/main/python/rlbot/socket</li> </ul>"},{"location":"framework/sockets-specification/#whos-using-sockets","title":"Who's Using Sockets","text":"<ul> <li>The core RLBot framework uses sockets from Python to start matches.</li> <li>The core RLBot framework uses sockets from within RLBotInterface.dll to run bots.</li> <li>Javascript / Typescript: easyrlbot</li> <li>RLBotControllerOverlay</li> <li>This little test script</li> </ul>"},{"location":"framework/supported-programming-languages/","title":"Supported programming languages","text":""},{"location":"framework/supported-programming-languages/#main-languages","title":"Main Languages","text":"<p>The following list of languages are supported by core developers of the RLBot framework, or have reached a very high level of documentation and support from the community. They are featured on rlbot.org.</p>"},{"location":"framework/supported-programming-languages/#python","title":"Python","text":"<p>RLBotPythonExample</p>"},{"location":"framework/supported-programming-languages/#java","title":"Java","text":"<p>RLBotJavaExample</p>"},{"location":"framework/supported-programming-languages/#c-and-other-net-languages","title":"C# (and other .NET languages)","text":"<p>RLBotCSharpExample</p>"},{"location":"framework/supported-programming-languages/#c","title":"C++","text":"<p>CPPExampleBot</p>"},{"location":"framework/supported-programming-languages/#rust","title":"Rust","text":"<p>crates.io</p> <p>RLBotRustTemplateBot</p>"},{"location":"framework/supported-programming-languages/#javascript","title":"Javascript","text":"<p>EasyRLBot</p> <p>EasyRLBotExample</p>"},{"location":"framework/supported-programming-languages/#scratch","title":"Scratch","text":"<p>RLBotScratchInterface</p>"},{"location":"framework/supported-programming-languages/#community-supported-languages","title":"Community Supported Languages","text":"<p>What follows is a list of languages, that the community have also made support for, however, their frameworks may be less documented and maintained. If you want to use a language not listed, Nim uses a socket intermediate bot as a bridge between the game and the Nim executable. This can be used by any other language (that can use sockets).</p>"},{"location":"framework/supported-programming-languages/#clojure","title":"Clojure","text":"<p>Clojure-Bot</p>"},{"location":"framework/supported-programming-languages/#nim","title":"Nim","text":"<p>NimExampleBot</p>"},{"location":"framework/supported-programming-languages/#go","title":"Go","text":"<p>RLBotGo</p> <p>RLBotGoExample</p>"},{"location":"framework/supported-programming-languages/#lua","title":"Lua","text":""},{"location":"framework/supported-programming-languages/#asciidots","title":"Asciidots","text":"<p>Because who doesn't love drawing ascii art?</p> <p>AsciiDots Documentation</p> <p>Documentation for RLBot version of AsciiDots</p> <p>Example bot</p>"},{"location":"framework/supported-programming-languages/#brainfuck","title":"Brainfuck","text":"<p>Scalable and efficient bot-making</p> <p>Brainfuck documentation</p> <p>Example bot</p>"},{"location":"framework/v5/","title":"RLBot v5 (Beta) Overview","text":"<p>This page has been moved.</p>"},{"location":"miscellaneous/extracting-map-meshes/","title":"Extracting map meshes","text":""},{"location":"miscellaneous/extracting-map-meshes/#prerequisites","title":"Prerequisites","text":"<ul> <li>64-bit Windows</li> <li>Rocket League</li> <li>U-Model</li> <li>Blender 2.9+</li> <li>Blender .psk addon</li> </ul>"},{"location":"miscellaneous/extracting-map-meshes/#additional-notes-before-getting-started","title":"Additional notes before getting started","text":"<p>This tutorial was tested on Blender 3.1.</p> <p>Python knowledge is preferred for this tutorial, but you can get by without it.</p> <p>Python does not need to be installed for this to work.</p> <p>The resulting <code>.bin</code> files can be imported into any language that can read binary numbers from a file. The id files are a chain of 32-bit integers in little-endian format, and the vertices are stored at 3 32-bit floats in a row (x, y, z), also stored in little-endian format. Each ID in ids corresponds to the index of the vertex if you parsed the vertices in the order that they appear in the file. (By default.)</p>"},{"location":"miscellaneous/extracting-map-meshes/#overview","title":"Overview","text":"<ol> <li>Opening U-Model the right way</li> <li>How to identify a map</li> <li>Extracting a map</li> <li>Identifying collision files</li> <li>Importing to Blender</li> <li>Converting object to binary data</li> </ol>"},{"location":"miscellaneous/extracting-map-meshes/#opening-u-model-the-right-way","title":"Opening U-Model the right way","text":"<p>Create a bat file called <code>umodel.bat</code>, and save this to it:</p> <pre><code>umodel.exe -game=rocketleague -path=\"C:\\Program Files (x86)\\Steam\\steamapps\\common\\rocketleague\\TAGame\\CookedPCConsole\"\n</code></pre> <p>Depending on where you saved U-Model, you may have to use <code>cd</code> before that to get to it:</p> <pre><code>cd C:\\Program Files (x86)\\umodel_win32\numodel.exe -game=rocketleague -path=\"C:\\Program Files (x86)\\Steam\\steamapps\\common\\rocketleague\\TAGame\\CookedPCConsole\"\n</code></pre> <p>Use this bat file that you create to launch U-Model whenever you need to use it.</p> <p>If you have Rocket League install through Epic Games, use this path instead: <code>C:\\Program Files\\Epic Games\\rocketleague\\TAGame\\CookedPCConsole</code></p> <p>WARNING: Be sure to use the 32-bit version of U-Model! You're safe as long as you don't change <code>umodel.exe</code> to <code>umodel_64.exe</code>. Some assets will refuse to load, if you do.</p>"},{"location":"miscellaneous/extracting-map-meshes/#how-to-identify-a-map","title":"How to identify a map","text":"<p>In the top-left-ish corner, there's space for you to filter all the files. If you type in <code>_P.upk</code>, you will get a list of all of the maps.</p> <p>If you're looking for a map, filter by <code>MapImage</code>. You can double-click on a file to view a preview of the map with a similar name. Press the key <code>O</code> (or go top left -&gt; File -&gt; Open package) to get back to the menu with all of the files.</p>"},{"location":"miscellaneous/extracting-map-meshes/#extracting-a-map","title":"Extracting a map","text":"<p>In this example, I will be using <code>Stadium_P.upk</code> - otherwise known as DFH Stadium.</p> <p>Right-click on the map you want to export, click <code>Export</code>, and all of the map data will be extracted for you.</p> <p>All files are extracted to the <code>UmodelExport</code> folder in whatever folder you saved U-Model to. For me, this is <code>C:\\Program Files (x86)\\umodel_win32\\UmodelExport</code>.</p>"},{"location":"miscellaneous/extracting-map-meshes/#identifying-collision-files","title":"Identifying collision files","text":"<p>Inside the folder of the map you extracted, there should be 5 more folders - the one that you want is called <code>StaticMesh3</code>. In this folder, simply look for any <code>.pskx</code> files that have the word <code>collision</code> in them. For DFH Stadium, there are 4 files:</p> <ul> <li><code>Goal_STD_Collision.pskx</code></li> <li><code>Field_STD_Collision_Corner.pskx</code></li> <li><code>Field_STD_Collision_SideTop.pskx</code></li> <li><code>Field_STD_Collision_SideBot.pskx</code></li> </ul> <p>These files contain all of the available field collision information.</p>"},{"location":"miscellaneous/extracting-map-meshes/#importing-to-blender","title":"Importing to Blender","text":"<p>Open Blender, and select \"General.\" This will load a default 3D scene, with a cube, light source, and camera.</p> <p></p> <p>Next, in the top right, delete all three of these things. (Right-click -&gt; Delete)</p> <p></p> <p>Now, we import ONE of our objects. This is important - we can only convert one at a time unless changes are made to the script in the next section. When you want to convert another object, delete the only one in the scene first. The process is the same as deleting the cube, as we did previously.</p> <p>To import an object, go to the top right -&gt; Files -&gt; Import -&gt; Skeleton Mesh (.psk). Use this to import one of the <code>.pskx</code> collision files that we got earlier.</p> <p></p> <p>For this, I have imported DFH Stadium's <code>Field_STD_Collision_Corner.pskx</code>.</p> <p></p>"},{"location":"miscellaneous/extracting-map-meshes/#converting-the-object-to-binary-data","title":"Converting the object to binary data","text":"<p>At the top of Blender, select the Scripting tab.</p> <p> In the top middle, select New.</p> <p></p> <p>Copy &amp; paste the below Python script:</p> <pre><code>import bpy\n\n# Blender Python API Documentation\n# https://docs.blender.org/api/current/index.html\n\nprint()\n\nif len(bpy.context.scene.objects) != 1:\n    print(\"MORE THAN ONE OBJECT EXISTS!\")\n    exit()\n\nobj_name = \"soccar_corner\"\n\ndata = bpy.context.scene.objects[0].data\n\nids = []\nverts = []\n\nfor tri in data.polygons:\n    for id in tri.vertices:\n        ids.append(id)\n\nfor vert in data.vertices:\n    for coord in vert.co:\n        verts.append(coord)\n\nprint(f\"Number of ids: {len(ids)}\")\nprint(f\"Number of triangles: {len(ids) / 3}\")\nprint(f\"Number of coordinates: {len(verts)}\")\nprint(f\"Number of vertices: {len(verts) / 3}\")\n\nimport os\nfrom pathlib import Path\n\nos.chdir(Path.home() / \"Documents\")\n\n#import json\n\n#with open(obj_name + \"_ids.json\", \"w\") as f:\n#    json.dump(ids, f)\n\n#print(\"Wrote json ids\")\n\n#with open(obj_name + \"_vertices.json\", \"w\") as f:\n#    json.dump(verts, f)\n#    \n#print(\"Wrote json vertices\")\n\nimport struct\n\nwith open(obj_name + \"_ids.bin\", \"wb\") as f:\n    f.write(struct.pack(\"&lt;\" + \"i\" * len(ids), *ids))\n\nprint(\"Wrote binary ids\")\n\nwith open(obj_name + \"_vertices.bin\", \"wb\") as f:\n    f.write(struct.pack(\"&lt;\" + \"f\" * len(verts), *verts))\n\nprint(\"Wrote binary vertices\")\n</code></pre> <p>You can edit the line <code>obj_name = \"soccar_corner\"</code> near the top to adjust the name of the outputted file, and <code>os.chdir(Path.home() / \"Documents\")</code> to edit the output folder.</p> <p>Click on the Play/Run button in the top middle to run the script.</p> <p></p> <p>This creates the two bin files containing the ids and vertices from the object.</p> <p></p> <p>If you want an example of using collision data and compiling them into a mesh to run collision queries on, check out the rl_ball_sym Rust project:</p> <ul> <li>Reading into a mesh</li> <li>Compiling all collision data into a big mesh, then triangles and a BVH</li> </ul>"},{"location":"miscellaneous/lan-setup/","title":"Lan setup","text":"<p>There are three ways to play with custom bots together with other players. They are:</p> <ol> <li>Rocket Host</li> <li>LAN Private Matches</li> <li>LAN Splitscreen</li> </ol> <p>Note: It is not possible to play with console players.</p>"},{"location":"miscellaneous/lan-setup/#option-1-rocket-host","title":"Option 1 - Rocket Host","text":"<p>Rocket Host is a match hosting service eliminating the need for Hamachi and similar. As of 2024-12-12 it supports RLBot allowing you to add custom bots to the matches.</p> <p>Please help cover the server expenses by supporting JetFox on Patreon.</p>"},{"location":"miscellaneous/lan-setup/#requirements","title":"Requirements","text":"<ul> <li>BakkesMod</li> <li>Rocket Host installed in Bakkesmod</li> </ul>"},{"location":"miscellaneous/lan-setup/#instructions-for-host","title":"Instructions for Host","text":"<ol> <li>Start Rocket League and make sure Bakkesmod is running.</li> <li>Open the Rocket Host plugin window (F8) and navigate to the RLBot tab.</li> <li>Pick a nearby server.</li> <li>Add some bots (note: some combinations are unsupported by request of bot developers).</li> <li>Request a server. This will give you an IP/port that you and your friends can join.</li> <li>Useful quick chat commands:<ul> <li>Use <code>!claim</code> to ensure only you can use commands.</li> <li>Use <code>!lock</code> to make the server appear as full (preventing random people from joining).</li> <li>Use <code>!kick &lt;playername&gt;</code> to kick a player (part of name works too).</li> </ul> </li> </ol>"},{"location":"miscellaneous/lan-setup/#instructions-for-others","title":"Instructions for Others","text":"<ol> <li>Start Rocket League and make sure Bakkesmod is running.</li> <li>Wait for host to send an IP/port.</li> <li>Join the server in the Rocket Host plugin window (F8).</li> </ol>"},{"location":"miscellaneous/lan-setup/#option-2-lan-private-match","title":"Option 2 - LAN Private Match","text":""},{"location":"miscellaneous/lan-setup/#requirements_1","title":"Requirements","text":"<ul> <li>Hamachi</li> <li>BakkesMod</li> <li>Rocket Plugin installed in Bakkesmod</li> <li>RLBotGUI (only needed for the host)</li> </ul> <p>Quick Note: If the host can forward port 7777 / configure their firewall, then neither the host nor the clients need to use Hamachi. Then the host only has to provide their IP address to the clients who enter it into Rocket Plugin to connect. This allows more connections than the free version of Hamachi.</p>"},{"location":"miscellaneous/lan-setup/#instructions-for-host_1","title":"Instructions for Host","text":"<p>Only the host can load bots into the game!</p> <ol> <li>Create a network in Hamachi and note the network ID (tutorials can be found online).</li> <li>Make sure that BakkesMod is running.</li> <li>Start Rocket League with RLBotGUI (start a match, then quit the match to the menu).</li> <li>Use the Rocket Plugin to host a LAN match<ul> <li>Press the \"Home\" key to open the Rocket Plugin menu.</li> <li>Setting a large team size helps, otherwise bots may de-spawn after demos.</li> <li>Click Host after setting the game options (and password if desired).</li> </ul> </li> <li>Tell your friends to join the match via Hamachi + Rocket Plugin (see below for details).<ul> <li>If they get a message saying that they could not connect to the host, make sure that you're using the same password for the match as your password for private matches or delete your private match password. See this post for details.</li> </ul> </li> <li>In RLBotGUI, set Extra -&gt; Existing Match Behaviour -&gt; Continue And Spawn.</li> <li>Drag desired bots onto teams in RLBotGUI.<ul> <li>Don't worry about adding Human players in RLBotGUI. Human players can simply join ingame.</li> </ul> </li> <li>Click Start Match in RLBotGUI. Expect the bots to join the teams.</li> </ol> <p>The setup is basically the same as playing custom maps. If the instructions above are not clear enough, see this video tutorial by Lethamyr.</p>"},{"location":"miscellaneous/lan-setup/#instructions-for-clients","title":"Instructions for Clients","text":"<p>Use the standard procedure for joining a LAN match via Rocket Plugin. You can find more detailed tutorials elsewhere, here's a short summary:</p> <ol> <li>Open Hamachi and join the host's network via the network ID they tell you.</li> <li>Right-click on the host and click \"Copy IPv4 Address\".</li> <li>Open Rocket League</li> <li>Open the Rocket Plugin menu with the \"Home\" key.</li> <li>Under the Multiplayer tab in the \"Join a local game\" section, paste the host's address into the IP Address field and click Join.<ul> <li>The port can be left at its default of 7777.</li> </ul> </li> </ol>"},{"location":"miscellaneous/lan-setup/#option-3-lan-splitscreen","title":"Option 3 - LAN Splitscreen","text":""},{"location":"miscellaneous/lan-setup/#requirements_2","title":"Requirements","text":"<ul> <li>Parsec</li> </ul>"},{"location":"miscellaneous/lan-setup/#instructions-for-host_2","title":"Instructions for Host","text":"<p>Only the host can loads bots into the game!</p> <ol> <li>Start Rocket League with RLBotGUI (launch a match, then quit the match to the lobby).</li> <li>Create a Parsec room and have your friends join</li> <li>Start new match with bots and players</li> <li>Have friends join appropriate team</li> </ol>"},{"location":"miscellaneous/lan-setup/#instructions-for-others_1","title":"Instructions for Others","text":"<ol> <li>Join Parsec room</li> <li>Press Start to join local Rocket League lobby</li> <li>Join appropriate team</li> </ol>"},{"location":"miscellaneous/missing-pages/","title":"Missing pages","text":"<p>The following wiki pages are not moved yet:</p> <ul> <li>Deploying Changes (maybe this should stay on the github wiki?)</li> <li>Remote RLBot (isn't this very outdated?)</li> <li>Setup Instructions (current) (self-explanatory)</li> </ul>"},{"location":"miscellaneous/rlbot-specific-game-settings/","title":"Rlbot specific game settings","text":"<p>RLBot has the ability to change game settings only when RLBot is active. This can be useful when a different environment is desired for developing or running bots compared to playing the game yourself.</p> <p>This is achieved by briefly altering TASystemSettings.ini as RLBot starts up Rocket League. This feature is currently only available on windows, and for the default TASystemSettings.ini location of %USERPROFILE%\\Documents\\My Games\\Rocket League\\TAGame\\Config.</p> <p>To have settings that only apply when using RLBot, a TASystemSettings.RLBot.ini file has to be created in the same folder as TASystemSettings.ini. This file does not need to be a full copy of TASystemSettings.ini, but should only contain the differences with TASystemSettings.ini to improve compatibility with Rocket League updates. When RLBot starts up, the changes found in TASystemSettings.RLBot.ini will be temporarily applied to TASystemSettings.ini.</p> <p>The remainder of this page contains some example use cases.</p>"},{"location":"miscellaneous/rlbot-specific-game-settings/#cap-the-in-game-fps-to-120-for-rlbot-uncap-the-fps-during-normal-play","title":"Cap the in game FPS to 120 for RLBot, uncap the FPS during normal play","text":"<p>This is useful to create the most consistent environment for RLBot. See Tick Rate for more info.</p> <ul> <li>The FPS will have to be uncapped during normal play. This is achieved by setting <code>AllowPerFrameSleep=False</code> in TASystemSettings.ini.</li> <li>In the game pause screen, the fps cap has to be set to 120 exactly.</li> <li>TASystemSettings.RLBot.ini should contain the following configuration to turn the FPS cap back on for RLBot:</li> </ul> <pre><code>[SystemSettings]\nAllowPerFrameSleep=True\n</code></pre>"},{"location":"miscellaneous/rlbot-specific-game-settings/#other-useful-settings-for-bot-testing","title":"Other Useful Settings For Bot Testing","text":"<p>in [SystemSettings]:</p> <ul> <li>ResX=1280 (Change the x value of your resolution)</li> <li>ResY=720 (Change the y value of your resolution)</li> <li>Fullscreen=False (False for window mode, True for fullscreen)</li> <li>Borderless=True (enable borderless for windowed mode aka Fullscreen=False)</li> </ul>"},{"location":"miscellaneous/workshop-custom-maps/","title":"Workshop custom maps","text":""},{"location":"miscellaneous/workshop-custom-maps/#automated-solution","title":"Automated Solution","text":"<p>RLBot has built in support for custom maps. It allows you to select a folder that has custom map (`*.upk) files anywhere in the directory. Once added, you can select any of the custom maps in the directory and play with bots on that map.</p>"},{"location":"miscellaneous/workshop-custom-maps/#steps","title":"Steps","text":"<ol> <li>Run RLBot. Add -&gt; Load Folder and select a directory with custom maps</li> <li>In Match Settings, click on the \"Map\" dropdown and you should see all the <code>*.upk</code> files listed there.</li> <li>Select and press \"Start Match\"</li> </ol>"},{"location":"miscellaneous/workshop-custom-maps/#manual-solution","title":"Manual Solution","text":"<ol> <li> <p>Find the workshop map you want to use. It will be located at    <code>\\Steam\\steamapps\\workshop\\content\\252950</code> Find the map you want inside one of those folders.    The map has a .udk extension.</p> </li> <li> <p>Change the map name to Labs_Underpass_P.upk. Be sure to change the extension as well.</p> </li> <li> <p>Copy the map to C:\\Program Files (x86)\\Steam\\steamapps\\common\\rocketleague\\TAGame\\CookedPCConsole. It will replace the Underpass map.</p> </li> <li> <p>On RLBotGui select Underpass to play the custom map.</p> </li> </ol>"},{"location":"troubleshooting/antivirus-notes/","title":"Antivirus notes","text":"<p>If RLBotGUI can't open, won't start a match, or acts in other strange ways it may be related to your antivirus software. Do not disable your antivirus.</p>"},{"location":"troubleshooting/antivirus-notes/#if-you-suspect-your-antivirus-has-broken-rlbot","title":"If you suspect your antivirus has broken RLBot:","text":"<ol> <li>Press <code>Windows + R</code>, and type in <code>%localappdata%\\RLBotGUIX</code> and then press Enter</li> <li>Delete the folders <code>Python37</code> and <code>venv</code></li> <li>Redownload RLBotGUI if necessary</li> <li>Create an exception for RLBotGUI in your antivirus software. The executable is located at <code>C:\\Program Files\\RLBot</code></li> <li>Launch RLBotGUI</li> </ol> <p>You might also be having a problem with your firewall. Windows Defender Firewall has been known to wrongly block RLBotGUI.exe in the past. To fix this problem:</p> <ol> <li>Go to Control Panel</li> <li>System and Security</li> <li>Under Windows Defender Firewall, click \"Allow an app through Windows Firewall\"</li> <li>Click \"Change settings\" (In the top-left-ish)</li> <li>Click \"Allow another app\" (In the bottom-left-ish)</li> <li>Navigate to RLBotGUI and select it.</li> <li>Click \"Network types...\"</li> <li>Make sure that both Private and Public networks are checked</li> <li>Click \"OK\"</li> <li>Click \"Add\"</li> <li>Click \"OK\"</li> </ol> <p>You're done!</p>"},{"location":"troubleshooting/installation-errors/","title":"Installation errors","text":""},{"location":"troubleshooting/installation-errors/#you-are-using-a-third-party-antivirus","title":"You are using a third-party antivirus","text":"<p>RLBotGUI may open for a second before closing, it may install but fail to work, or produce other weird behavior. A list of known antivirus-related error messages is listed down below under Miscellaneous Issues</p> <ol> <li>Check out our other wiki page: Antivirus Notes</li> </ol>"},{"location":"troubleshooting/installation-errors/#rlbotgui-gets-stuck-updatingcollecting-packages-during-installation","title":"RLBotGUI gets stuck updating/collecting packages during installation","text":"<p>This usually happens because of:</p> <ol> <li>slow internet (try giving it 5 minutes)</li> <li>pip (python's package installer) broke</li> </ol> <p>If you've given it time and nothing's happened:</p> <ol> <li>Restart your computer and try again</li> <li>If that doesn't work, delete pip's cache folder located in <code>%localappdata%/pip</code> and try again</li> </ol>"},{"location":"troubleshooting/installation-errors/#problems-starting-a-match","title":"Problems starting a match","text":"<p>Check the console window for any error messages.</p>"},{"location":"troubleshooting/installation-errors/#encountered-a-std-exception-listen","title":"Encountered a std Exception: listen","text":"<p>Another program is preventing RLBot from talking to Rocket League.</p> <ol> <li>Restart your computer</li> </ol>"},{"location":"troubleshooting/installation-errors/#encountered-a-std-exception-unknown-error","title":"Encountered a std Exception: Unknown Error","text":"<p>A Bakkesmod plugin that you are using isn't compatible with RLBot.</p> <ol> <li>Disable Bakkesmod</li> <li>Restart Rocket League and RLBotGUI</li> </ol>"},{"location":"troubleshooting/installation-errors/#the-game-is-open-but-no-match-started","title":"The game is open but no match started","text":"<ol> <li>Ensure you started with Rocket League closed. RLBotGUI has to launch it for you</li> <li>Check for the above errors in the console</li> <li>Check your antivirus to ensure it didn't delete RLBot's files</li> </ol>"},{"location":"troubleshooting/installation-errors/#the-game-doesnt-launch-and-theres-no-error-in-the-console","title":"The game doesn't launch and there's no error in the console","text":"<ol> <li>Ensure you set RLBotGUI to launch from the correct (Steam/Epic) platform.</li> </ol>"},{"location":"troubleshooting/installation-errors/#javalangruntimeexception-javaniocharsetmalformedinputexception-input-length-1","title":"java.lang.RuntimeException: java.nio.charset.MalformedInputException: Input length = 1","text":"<p>This currently happens to people with strange letters/characters in their Steam username.</p> <ol> <li>Change your steam username</li> </ol>"},{"location":"troubleshooting/installation-errors/#miscellaneous-issues","title":"Miscellaneous Issues","text":""},{"location":"troubleshooting/installation-errors/#common-antivirus-related-error-messages","title":"Common Antivirus-related error messages","text":"<ul> <li><code>FileNotFoundError [WinError 2]: The system cannot find the file specified</code></li> <li><code>Please check that the file exists and your antivirus is not removing it</code></li> <li><code>Windows: OSError: [WinError 1450] Insufficient system resources exist to complete the requested service</code></li> <li><code>Encountered exception:  [WinError 5] Access is denied</code></li> <li><code>[WinError 225] Operation did not complete successfully because the file contains a virus or potentially unwanted software</code></li> </ul> <p>For all of the above:</p> <ol> <li>Check out our other wiki page for this issue: Antivirus Notes</li> </ol>"},{"location":"troubleshooting/installation-errors/#cannot-proceed-because-vcruntime140dll-was-not-found","title":"Cannot proceed because VCRUNTIME140.dll was not found","text":"<p>Your computer may be missing some important files, which you can download from here:</p> <ul> <li>https://go.microsoft.com/fwlink/?LinkId=746572</li> <li>https://go.microsoft.com/fwlink/?LinkId=746571</li> </ul>"},{"location":"troubleshooting/installation-errors/#application-error-the-application-was-unable-to-start-correctly-0xc000007b","title":"Application Error: The application was unable to start correctly (0xc000007b).","text":"<ol> <li>Restart your computer</li> </ol>"},{"location":"troubleshooting/installation-errors/#frame-stuttering-when-using-rlbot","title":"Frame stuttering when using RLBot","text":"<ol> <li>Restart your computer</li> <li>Close or disable DropBox if it is running</li> </ol>"},{"location":"troubleshooting/installation-errors/#bot-development-issues","title":"Bot development Issues","text":""},{"location":"troubleshooting/installation-errors/#python-acting-super-weird","title":"Python Acting Super Weird","text":"<p>Sometimes on Windows 10, <code>~\\AppData\\Local\\Microsoft\\WindowsApps</code> will end up on your system path, which supplies a fake python.exe taking you to the Microsoft Store. This causes bizarre things to happen, e.g. nothing at all being printed when you run <code>python --version</code>.</p> <p>You can confirm whether this is happening to you by opening a command prompt and running <code>where.exe</code> like this:</p> <pre><code>&gt;where.exe python\nC:\\Users\\tareh\\AppData\\Local\\Microsoft\\WindowsApps\\python.exe\n</code></pre> <p>If it shows the Microsoft\\WindowsApps\\python.exe one at the top, you need to fix it. You can try this</p>"},{"location":"troubleshooting/installation-errors/#javalangunsatisfiedlinkerror-a-dynamic-link-library-dll-initialization-routine-failed","title":"java.lang.UnsatisfiedLinkError: A dynamic link library (DLL) initialization routine failed.","text":"<ol> <li>Run your .bat files as administrator to get past this error.</li> </ol>"},{"location":"troubleshooting/installation-errors/#could-not-locate-a-suitable-bot-class-in-module","title":"Could not locate a suitable bot class in module","text":"<p>This means that your bot's python file was found, but there's something messed up in it.</p> <ol> <li>Ensure you saved the file</li> <li>Check to make sure your bot extends the framework's agent class</li> </ol>"},{"location":"troubleshooting/installation-errors/#could-not-find-a-version-that-satisfies-the-requirement-pyqt5","title":"Could not find a version that satisfies the requirement PyQt5","text":"<p>Your system might be using python 2 instead of python 3. This can happen even if you successfully installed python 3 and added it to your path. Verify whether this is the case by running <code>python --version</code>. If it says python 2, try these:</p> <ol> <li>Make sure you've installed python 3 and chosen \"Add to PATH\" during the installation.</li> <li>Open the windows \"environment variables\" dialog and make sure that python 3 is listed before python 2.</li> </ol>"},{"location":"troubleshooting/installation-errors/#scratch-the-project-file-that-was-selected-failed-to-load","title":"Scratch: The project file that was selected failed to load.","text":"<p>We're using Scratch 3.0 which is pre-release and a bit buggy. Sometimes the save gets corrupted. Here's how to avoid that, and recover your file if it does get corrupted:</p> <ul> <li>If you save a vector in a variable then save your project, it will be broken.</li> <li>If you somehow insert null values into a list then save your project, it will be broken.</li> </ul> <p>General strategy for recovering the file:</p> <ol> <li>Hit F12 in your browser to view the javascript console and read the error that appears when you try to upload the broken file. It will look something like this:</li> </ol> <pre><code>gui {\"validationError\":\"Could not parse as a valid SB2 or SB3 project.\",\"sb2Errors\":[{\"keyword\":\"required\",\"dataPath\":\"\",\"schemaPath\":\"#/required\",\"params\":{\"missingProperty\":\"objName\"},\"message\":\"should have required property 'objName'\"}],\"sb3Errors\":[{\"keyword\":\"type\",\"dataPath\":\".targets[0].lists['g*`|xWn5EppiH.9NKPVF'][1][0]\",\"schemaPath\":\"#/definitions/stringOrNumber/oneOf/0/type\",\"params\":{\"type\":\"string\"},\"message\":\"should be string\"},{\"keyword\":\"type\",\"dataPath\":\".targets[0].lists['g*`|xWn5EppiH.9NKPVF'][1][0]\",\"schemaPath\":\"#/definitions/stringOrNumber/oneOf/1/type\",\"params\":{\"type\":\"number\"},\"message\":\"should be number\"},{\"keyword\":\"oneOf\",\"dataPath\":\".targets[0].lists['g*`|xWn5EppiH.9NKPVF'][1][0]\",\"schemaPath\":\"#/definitions/stringOrNumber/oneOf\",\"params\":{\"passingSchemas\":null},\"message\":\"should match exactly one schema in oneOf\"},{\"keyword\":\"type\",\"dataPath\":\".targets[0].lists['g*`|xWn5EppiH.9NKPVF'][1][0]\",\"schemaPath\":\"#/oneOf/1/type\",\"params\":{\"type\":\"boolean\"},\"message\":\"should be boolean\"},{\"keyword\":\"oneOf\",\"dataPath\":\".targets[0].lists['g*`|xWn5EppiH.9NKPVF'][1][0]\",\"schemaPath\":\"#/oneOf\",\"params\":{\"passingSchemas\":null},\"message\":\"should match exactly one schema in oneOf\"}]}\n</code></pre> <ol> <li>Your sb3 is really a zip file, so unzip it and look inside project.json.</li> <li>Search for xWn5EppiH.9NKPVF and see if there's anything funky saved in it, and manually make a fix. For a list, you could delete the list items. For a variable, you could set it to \"\".</li> <li>Then put the fixed version of project.json back in the zip and try uploading again.</li> </ol>"},{"location":"troubleshooting/installation-errors/#import-errors","title":"Import errors:","text":"<p>If you run into an import error that works fine when testing outside of rlbot but crashes when loading your agent, it can most often be solved by simply moving the import statement to your agent's init method. This is helpful for libraries such as tensorflow and rlutilities</p>"},{"location":"troubleshooting/installation-errors/#old-issues-that-are-probably-irrelevant","title":"Old issues that are probably irrelevant","text":""},{"location":"troubleshooting/installation-errors/#pip-is-not-recognized-as-an-internal-or-external-command","title":"'pip 'is not recognized as an internal or external command","text":"<p>Something blocked RLBotGUI from installing Python on the first try, and you have to reinstall by following these steps:</p> <ol> <li>Press <code>Windows + R</code>, and type in <code>%localappdata%\\RLBotGUIX</code> and then press Enter</li> <li>Delete the folders <code>Python37</code> and <code>venv</code></li> <li>Relaunch RLBotGUI.exe</li> </ol>"},{"location":"troubleshooting/installation-errors/#the-term-expand-archive-is-not-recognized-as-the-name-of-a-cmdlet","title":"The term 'Expand-Archive' is not recognized as the name of a cmdlet","text":"<p>You are using an older version of Windows and must manually perform some of the installation with the following steps:</p> <ol> <li>Download our copy of Python from here</li> <li>Press <code>Windows + R</code>, type in <code>%localappdata%\\RLBotGUIX</code> and then press Enter</li> <li>Create a new folder called <code>Python37</code> and open the folder</li> <li>Find the zip file of Python you downloaded and double click it</li> <li>Drag the contents from the zip file into the folder Python37</li> </ol>"},{"location":"v5/","title":"Overview","text":"<p>RLBot v5 is in beta!</p> <p>Breaking changes may occur as we finalize the framework. Learn more about v5 in the RLBot v5 Overview and start converting your bot today!</p> <p>Welcome to the RLBot v5 wiki! RLBot is a framework for creating offline Rocket League bots. The framework uses an official Psyonix API making our bots safe to play with and against. This wiki primarily houses resources for bot development, but you can also find guides for users, framework documentation, and community insights.</p>"},{"location":"v5/#getting-started","title":"Getting Started","text":"<ul> <li>Download RLBot</li> </ul>"},{"location":"v5/#video-tutorials","title":"Video tutorials","text":"<ul> <li>Getting started with RLBot v5</li> </ul>"},{"location":"v5/#language-specific-wikis","title":"Language-specific wikis","text":"<ul> <li>Python</li> <li>RLGym</li> </ul>"},{"location":"v5/botmaking/ball-path-prediction/","title":"Ball path prediction","text":"<p>When writing a bot, it's very useful to know where the ball will be a few seconds in the future. This is very challenging because the ball responds to gravity, drag, friction, spin, and bounces off of curvy walls. Fortunately, RLBot has your back.</p> <p>Ball prediction is an estimation</p> <p>RLBot's ball prediction it is not exact! It is recommended that you routinely update your predictions to have the most accurate estimates.</p> <p>RLBot v5's ball prediction is 6 seconds' worth of ball path data, each advancing 1/120 of a second into the future for a total of 720 slices. Each slice has the predicted position, velocity, and angular velocity of the ball. It's assumed that the ball doesn't collide with any of the cars on the field.</p>"},{"location":"v5/botmaking/ball-path-prediction/#message-structure","title":"Message structure","text":"<p>The <code>BallPrediction</code> flatbuffer defines the data in each message. The message is a list of 720 <code>PredictionSlice</code>s, with each slice advancing 1/120 of a second into the future past the previous slice.</p> <p>A <code>PredictionSlice</code> contains the following fields:</p> <ul> <li><code>game_seconds</code> - The moment in game time that this prediction corresponds to. This corresponds to 'seconds_elapsed' in <code>MatchInfo</code>.</li> <li><code>physics</code> - The <code>Physics</code> information for the ball at this slice. This contains:<ul> <li><code>location</code></li> <li><code>velocity</code></li> <li><code>angular_velocity</code></li> </ul> </li> </ul> <p>Ball rotation</p> <p>Since the ball is a sphere, its orientation doesn't matter as the shape is the same in all directions. For this reason, the <code>rotation</code> is not computed and the field is always has <code>0</code> for <code>pitch</code>, <code>yaw</code>, and <code>roll</code>.</p>"},{"location":"v5/botmaking/ball-path-prediction/#language-specific-examples","title":"Language-specific examples","text":"<ul> <li>Python</li> </ul>"},{"location":"v5/botmaking/bot-loadouts/","title":"Bot Loadouts and Logos","text":""},{"location":"v5/botmaking/bot-loadouts/#logos","title":"Logos","text":"<p>You can give your bot/script a logo, which will be displayed in the RLBotGUI and sometimes tournaments. The logo must be a 400x300 pixels png file. You specify the logo using <code>logo_file</code> under the <code>[settings]</code> header in the config toml file. See Config Files.</p>"},{"location":"v5/botmaking/bot-loadouts/#customizing-loadouts-in-the-gui","title":"Customizing Loadouts in the GUI","text":"<p>The easiest way to customize your bot's loadout is via the RLBotGUI. To bring up the loadout editor, click on the bot info icon and then click Edit Loadout.</p> <p>You can use any item in the game, including painted items. The editor should have the latest items, but we have to manually update them. So if some recently added items are missing, please remind us on our Discord server. You can also click the bottom left buttons to preview your loadout in-game instantly!</p> <p>Tip: When previewing in-game and trying multiple loadouts, sometimes the camera will lose track of your car when it respawns. You can avoid this by cycling the camera with your mouse buttons instead of using the number keys. With this technique it should be possible to get into a camera mode like hard-attach and have it be stable as you look at different wheels, blue car vs orange car, etc.</p>"},{"location":"v5/botmaking/bot-loadouts/#manual-loadout-customization","title":"Manual Loadout Customization","text":"<p>In your bot's config file you can set your bot's loadout file with the <code>loadout_file</code> field under the <code>[settings]</code> header.</p> Loadout toml file example <p>A loadout toml file looks like this:</p> <pre><code>[blue_loadout]\nteam_color_id = 29\ncustom_color_id = 0\ncar_id = 23\ndecal_id = 6083\nwheels_id = 1580\nboost_id = 35\nantenna_id = 0\nhat_id = 0\npaint_finish_id = 0\ncustom_finish_id = 0\nengine_audio_id = 6919\ntrails_id = 3220\ngoal_explosion_id = 4118\n\n[orange_loadout]\nteam_color_id = 69\ncustom_color_id = 0\ncar_id = 23\ndecal_id = 6083\nwheels_id = 1580\nboost_id = 35\nantenna_id = 0\nhat_id = 0\npaint_finish_id = 1681\ncustom_finish_id = 1681\nengine_audio_id = 5635\ntrails_id = 3220\ngoal_explosion_id = 4118\n\n[blue_loadout.paint]\ncar_paint_id = 12\ndecal_paint_id = 12\nwheels_paint_id = 12\nboost_paint_id = 12\nantenna_paint_id = 0\nhat_paint_id = 0\ntrails_paint_id = 12\ngoal_explosion_paint_id = 12\n\n[orange_loadout.paint]\ncar_paint_id = 12\ndecal_paint_id = 12\nwheels_paint_id = 12\nboost_paint_id = 12\nantenna_paint_id = 0\nhat_paint_id = 0\ntrails_paint_id = 12\ngoal_explosion_paint_id = 12\n</code></pre>"},{"location":"v5/botmaking/bot-loadouts/#item-ids","title":"Item IDs","text":"<p>The GUI loadout editor uses a CSV file generated by BakkesMod using the <code>dumpitems</code> command. You can see the most recently generated file here.</p> <p>To see the items, you might want to browse https://rocket-league.com/items/ or just use the editor in the GUI instead.</p>"},{"location":"v5/botmaking/bot-loadouts/#colors","title":"Colors","text":"<p>Use <code>team_color_id</code> and <code>custom_color_id</code> to index into the swatches (see images below).</p> <p><code>team_color_id</code> are the primary color of the car. The top left color is index 0 increasing as you go right:</p> <p></p> <p></p> <p><code>custom_color_id</code> is the secondary color, also called accent. These are identical for both teams:</p> <p></p> <p>Warning</p> <p>The shade of the colors may not be correspond exactly with pictures.</p>"},{"location":"v5/botmaking/bot-loadouts/#painted-items","title":"Painted Items","text":"<p>For painted items, use the paint index below:</p> <ul> <li>0 - None</li> <li>1 - Crimson</li> <li>2 - Lime</li> <li>3 - Black</li> <li>4 - Sky Blue</li> <li>5 - Cobalt</li> <li>6 - Burnt Sienna</li> <li>7 - Forest Green</li> <li>8 - Purple</li> <li>9 - Pink</li> <li>10 - Orange</li> <li>11 - Grey</li> <li>12 - Titanium White</li> <li>13 - Saffron</li> </ul> <p>These are set in your loadout toml file under the <code>[blue_loadout.paint]</code> and <code>[orange_loadout.paint]</code> headers. See the example in the section above.</p>"},{"location":"v5/botmaking/bot-loadouts/#generating-a-loadout","title":"Generating a Loadout","text":"<p>Your bot does not have to look the same every match. During initialization of a bot, you can set your bot's loadout to any loadout, typically using a <code>set_loadout(...)</code> method. This enables you to choose different loadouts based on player index or game mode or randomize parts of your loadout, etc. Be fancy!</p> <p>Warning</p> <p>We recommend having a default loadout specified by a <code>loadout.toml</code>. Your bot will use this as a fallback in matches where cars are spawned immediately, e.g. if <code>wait_for_agents=false</code> or <code>existing_match_behavior=\"ContinueAndSpawn\"</code> in the match configuration.</p>"},{"location":"v5/botmaking/bot-loadouts/#need-inspiration","title":"Need inspiration?","text":"<p>reddit.com/r/RLFashionAdvice</p>"},{"location":"v5/botmaking/config-files/","title":"Configuration Files","text":"<p>RLBot uses the standard <code>.toml</code> format for all configuration files. To see how TOML works, check out the TOML spec.</p> <p>The framework uses four types of config files, commonly known as:</p> <ul> <li><code>bot.toml</code> GOTO</li> <li><code>script.toml</code> GOTO</li> <li><code>loadout.toml</code> GOTO</li> <li><code>match.toml</code> GOTO</li> </ul>"},{"location":"v5/botmaking/config-files/#bot-script-config-files","title":"Bot &amp; Script Config Files","text":"<p>A bot/script config file defines a bot/script and its attributes, closely resembling the <code>PlayerConfiguration</code>/<code>ScriptConfiguration</code> from the flatbuffer schema. The content of config files for bots and scripts are very similar, so the file extension indicates whether it is a bot or script:</p> <ul> <li>Bots: Named <code>bot.toml</code> or ends with <code>.bot.toml</code>. Here are examples of valid names: <code>bot.toml</code>, <code>Necto.bot.toml</code>, <code>atba.bot.toml</code></li> <li>Scripts: Named <code>script.toml</code> or ends with <code>.script.toml</code>. Here are examples of valid names: <code>script.toml</code>, <code>tron.script.toml</code>, <code>SCB.script.toml</code></li> </ul> <p>It should also be noted that whatever prefixes the <code>.bot.toml</code>/<code>.script.toml</code> file name will not be used by anything in RLBot.</p> <p>The sections and fields:</p> <ul> <li><code>[settings]</code> - Used by both RLBot and the GUI<ul> <li><code>agent_id</code> - The static, unique id that is associated with this bot. Preferred format is <code>\"author/bot-name\"</code>.</li> <li><code>name</code> - The name of the bot/script.</li> <li><code>loadout_file</code> - The path to the loadout file for the bot. Ignored for scripts.</li> <li><code>root_dir</code> - A path to the root directory of the bot, e.g. <code>\"./bin/\"</code>. The <code>run_command</code> will be run from the root directory.</li> <li><code>run_command</code> - The command to run the bot/script on Windows. If empty, the bot must be started manually (This may be handy during development if a default <code>agent_id</code> is coded into the bot).</li> <li><code>run_command_linux</code> - The command to run the bot/script on Linux.</li> <li><code>hivemind</code> - Boolean. Whether all bot team mates with this agent id is controlled by the same process. See Hiveminds. Ignored for scripts.</li> <li><code>logo_file</code> - The path to the logo file for the bot/script. A logo is a 400x300 png file.</li> </ul> </li> <li><code>[details]</code> - Used only by the GUI<ul> <li><code>description</code> - A description of the bot/script.</li> <li><code>fun_fact</code> - A fun fact about the bot/script.</li> <li><code>source_link</code> - A link to the source code of the bot/script.</li> <li><code>developer</code> - The developer(s) of the bot/script.</li> <li><code>language</code> - The language the bot/script is written in.</li> <li><code>tags</code> - A list of tags that describe the bot/script. These will affect which categories in the GUI your bot/script appear in. Possible tags:<ul> <li><code>1v1</code> - The bot plays traditional 1v1 soccar.</li> <li><code>teamplay</code> - The bot considers team mates and rotates.</li> <li><code>goalie</code> - Only add this tag if your bot only plays as a goalie. Incompatible with teamplay tag!</li> <li><code>hoops</code> - The bot understands the Hoops game mode.</li> <li><code>dropshot</code> - The bot understands the Dropshot game mode.</li> <li><code>snow-day</code> - The bot understands the Snow Day game mode.</li> <li><code>spike-rush</code> - The bot understands the Spike-Rush game mode.</li> <li><code>heatseeker</code> - The bot understands the Heatseeker game mode.</li> <li><code>memebot</code> - The bot has an untraditional play style.</li> </ul> </li> </ul> </li> </ul> <p>Psyonix Bot Presets</p> <p>If a Psyonix bot is not given a name, it will be a random standard Psyonix bot. If a Psyonix bot's name matches a standard Psyonix bot, it will use the standard loadout of that bot unless a loadout file is specified.</p> Example <code>bot.toml</code> that runs a Python bot in a virtual environment <pre><code>[settings]\nagent_id = \"rolv-soren/necto\"\nname = \"Necto\"\nloadout_file = \"loadout.toml\"\nrun_command = \".\\\\venv\\\\Scripts\\\\python bot.py\"\nrun_command_linux = \"./venv/bin/python bot.py\"\nlogo_file = \"necto_logo.png\"\n\n[details]\ndescription = \"Necto is the official RLGym community bot, trained using PPO with workers run by people all around the world.\"\nfun_fact = \"Necto uses an attention mechanism, commonly used for text understanding, to support any number of players\"\nsource_link = \"https://github.com/Rolv-Arild/Necto\"\ndeveloper = \"Rolv, Soren, and several contributors\"\nlanguage = \"rlgym\"\ntags = [\"1v1\", \"teamplay\"]\n</code></pre> Example <code>script.toml</code> that runs in the global Python environment <pre><code>[settings]\nagent_id = \"rlbot-community/script-example\"\nname = \"Script Example\"\nrun_command = \"python render.py\"\nrun_command_linux = \"python3 render.py\"\nlogo_file = \"logo.png\"\n\n[details]\ndescription = \"Script example\"\nfun_fact = \"This is just an example TOML!\"\nsource_link = \"\"\ndeveloper = \"The RLBot community\"\nlanguage = \"python\"\ntags = []\n</code></pre>"},{"location":"v5/botmaking/config-files/#loadout-config-files","title":"Loadout Config Files","text":"<p>Loadout config files, e.g. <code>loadout.toml</code>, define a bot's default loadout. They are tedious to make by hand, so we recommend using the GUI's loadout maker. The item ids can be found here. Note that it is also possible to set your bots loadout through code. See Set Loadout.</p> Example <code>loadout.toml</code> <pre><code>[blue_loadout]\n# Primary Color selection\nteam_color_id = 29\n# Secondary Color selection\ncustom_color_id = 0\n# Car type (Octane, Merc, etc)\ncar_id = 23\n# Type of decal\ndecal_id = 6083\n# Wheel selection\nwheels_id = 1580\n# Boost selection\nboost_id = 35\n# Antenna Selection\nantenna_id = 0\n# Hat Selection\nhat_id = 0\n# Paint Type (for first color)\npaint_finish_id = 0\n# Paint Type (for secondary color)\ncustom_finish_id = 0\n# Engine Audio Selection\nengine_audio_id = 6919\n# Car trail Selection\ntrails_id = 3220\n# Goal Explosion Selection\ngoal_explosion_id = 4118\n\n[orange_loadout]\nteam_color_id = 69\ncustom_color_id = 0\ncar_id = 23\ndecal_id = 6083\nwheels_id = 1580\nboost_id = 35\nantenna_id = 0\nhat_id = 0\npaint_finish_id = 1681\ncustom_finish_id = 1681\nengine_audio_id = 5635\ntrails_id = 3220\ngoal_explosion_id = 4118\n\n[blue_loadout.paint]\ncar_paint_id = 12\ndecal_paint_id = 12\nwheels_paint_id = 12\nboost_paint_id = 12\nantenna_paint_id = 0\nhat_paint_id = 0\ntrails_paint_id = 12\ngoal_explosion_paint_id = 12\n\n[orange_loadout.paint]\ncar_paint_id = 12\ndecal_paint_id = 12\nwheels_paint_id = 12\nboost_paint_id = 12\nantenna_paint_id = 0\nhat_paint_id = 0\ntrails_paint_id = 12\ngoal_explosion_paint_id = 12\n</code></pre>"},{"location":"v5/botmaking/config-files/#match-config-files","title":"Match Config Files","text":"<p>A match config file, e.g. <code>match.toml</code>, define a match and its settings, closely resembling <code>MatchConfiguration</code> from the flatbuffer schema.</p> <p>Sections and fields:</p> <ul> <li><code>[rlbot]</code><ul> <li><code>launcher</code> - Indicates how Rocket League should be launched if it is not already running. Either <code>\"Steam\"</code> (default), <code>\"Epic\"</code>, <code>\"Custom\"</code> (see <code>launcher_arg</code>), or <code>NoLaunch</code>.</li> <li><code>launcher_arg</code> - Additional configuration to the launching method:<ul> <li><code>\"legendary\" (Custom)</code> - Start Rocket League using Legendary</li> <li><code>\"heroic\" (Custom)</code> - Start Rocket League using Heroic</li> </ul> </li> <li><code>auto_start_agents</code> - Boolean (default: true). Whether bots and scripts should be started using their run command. It is also possible to disable auto-starting for individual bots and scripts. See <code>[cars]::auto_start</code> and <code>[scripts]::auto_start</code>.</li> <li><code>wait_for_agents</code> - Boolean (default: true). Whether RLBot should wait for bots and scripts to be connected and ready before starting the match.</li> </ul> </li> <li><code>[match]</code><ul> <li><code>game_mode</code> - The game mode. Either <code>\"Soccar\"</code>/<code>\"Soccer\"</code> (default), <code>\"Hoops\"</code>, <code>\"Dropshot\"</code>, <code>\"Hockey\"</code>, <code>\"Rumble\"</code>, <code>\"Heatseeker\"</code>, <code>\"Gridiron\"</code>, or <code>\"Knockout\"</code>. This affects ball prediction and a few of the game rules although many game modes can also be recreated solely from mutators. See what mutators and game mode combinations make up the official modes here.</li> <li><code>game_map_upk</code> - The map upk file to load, e.g. <code>\"UtopiaStadium_P\"</code>. On Steam version of Rocket League this can be used to load custom map files, but on Epic version it only works on the Psyonix maps. Available maps can be found here.</li> <li><code>cars</code> - A list of players in the match. See the car section below for fields of cars.</li> <li><code>scripts</code> - A list of scripts in the match. See the script section below for fields of scripts.</li> <li><code>skip_replays</code> - Boolean (default: false). Whether to skip goal replays.</li> <li><code>start_without_countdown</code> - Boolean (default: false). Whether to start without kickoff countdown.</li> <li><code>existing_match_behavior</code> - How to handle any ongoing match (if no match is running, a new one is started). Either:<ul> <li><code>\"Restart\"</code> (default): Always start a new match.</li> <li><code>\"RestartIfDifferent\"</code>: Starts a new match unless the match configuration is completely identical to the previous one.</li> <li><code>\"ContinueAndSpawn\"</code>: Let the match continue and spawn/despawn bots to match the new match configuration. Specifically:<ul> <li>For each player index, if the team or agent id is different in the new match config, that player's car is despawned. Other cars are completely unaffected, and new cars are spawned for the new players.</li> <li>All bot and script processes are restarted, even if they control a car that is not despawned. As a consequence, the restarted process receives the updated match config.</li> <li>The local human player is also spawned or set to spectator based on the new match config. Additional humans are not affected due to limitations.</li> <li>Mutators are not affected, but debug rendering and state setting options are updated.</li> </ul> </li> </ul> </li> <li><code>enable_rendering</code> - Boolean (default: false). Whether debug rendering is displayed.</li> <li><code>enable_state_setting</code> - Boolean (default: true). Whether bots and scripts are allowed to manipulate the game state, e.g. teleporting cars and ball.</li> <li><code>auto_save_replay</code> - Boolean (default false). Whether the match replay should be saved even if match is stopped early (useful when match length is unlimited).</li> <li><code>freeplay</code> - Boolean(default false). Whether or not to use freeplay instead of an exhibition match. This allows the players to use training keybinds, Bakkesmod plugins, and other features that are only allowed in free play.</li> </ul> </li> <li><code>[mutators]</code><ul> <li><code>match_length</code> - Duration of the match. Either <code>\"FiveMinutes\"</code> (default), <code>\"TenMinutes\"</code>, <code>\"TwentyMinutes\"</code>, or <code>\"Unlimited\"</code>.</li> <li><code>max_score</code> - Max score of match. If this score is reached, the team immediately wins. Either <code>\"Unlimited\"</code> (default), <code>\"OneGoal\"</code>, <code>\"ThreeGoals\"</code>, <code>\"FiveGoals\"</code>, <code>\"SevenGoals\"</code>, <code>\"TenGoals\"</code>, <code>\"TwentyGoals\"</code>, <code>\"ThirtyGoals\"</code>, <code>\"FortyGoals\"</code>, <code>\"FiftyGoals\"</code>, <code>\"SixtyGoals\"</code>, <code>\"SeventyGoals\"</code>, <code>\"EightyGoals\"</code>, <code>\"NinetyGoals\"</code>, or <code>\"HundredGoals\"</code>.</li> <li><code>multi_ball</code> - The number of balls. Either <code>\"One\"</code> (default), <code>\"Two\"</code>, <code>\"Four\"</code>, or <code>\"Six\"</code>.</li> <li><code>overtime</code> - The overtime rules and tiebreaker. Either <code>\"Unlimited\"</code> (default), <code>\"FiveMaxFirstScore\"</code>, or <code>\"FiveMaxRandomTeam\"</code>.</li> <li><code>series_length</code> - The series length. Either <code>\"Unlimited\"</code> (default), <code>\"ThreeGames\"</code>, <code>\"FiveGames\"</code>, or <code>\"SevenGames\"</code>.</li> <li><code>game_speed</code> - A game speed multiplier. Either <code>\"Default\"</code>, <code>\"SloMo\"</code>, or <code>\"TimeWarp\"</code>.</li> <li><code>ball_max_speed</code> - Ball max speed. Either <code>\"Default\"</code>, <code>\"Slow\"</code>, <code>\"Fast\"</code>, or <code>\"SuperFast\"</code>.</li> <li><code>ball_type</code> - Ball type and shape. Either <code>\"Default\"</code>, <code>\"Cube\"</code>, <code>\"Puck\"</code>, <code>\"Basketball\"</code>, <code>\"Beachball\"</code>, <code>\"Anniversary\"</code>, <code>\"Haunted\"</code>, <code>\"Ekin\"</code>, <code>\"SpookyCube\"</code>, <code>\"Egg\"</code>, <code>\"PlayerSeeking\"</code>, <code>\"Dropshot\"</code>, <code>\"ScoreAbsorb\"</code>, <code>\"Shoe\"</code>, or <code>\"PizzaPuck\"</code>.</li> <li><code>ball_weight</code> - Ball weight and how much is curves. Either <code>\"Default\"</code>, <code>\"Light\"</code>, <code>\"Heavy\"</code>, <code>\"SuperLight\"</code>, <code>\"CurveBall\"</code>, <code>\"BeachBallCurve\"</code>, <code>\"MagnusFutBall\"</code>, or <code>\"MagnusFutballLess\"</code>.</li> <li><code>ball_size</code> - Ball size. Either <code>\"Default\"</code>, <code>\"Small\"</code>, <code>\"Medium\"</code>, <code>\"Large\"</code>, or <code>\"Gigantic\"</code>.</li> <li><code>ball_bounciness</code> - Ball bounciness. Either <code>\"Default\"</code>, <code>\"Low\"</code>, <code>\"High\"</code>, <code>\"SuperHigh\"</code>, or <code>\"LowishBounciness\"</code>.</li> <li><code>boost_amount</code> - Boost amount/recharge. Either <code>\"NormalBoost\"</code>, <code>\"UnlimitedBoost\"</code>, <code>\"SlowRecharge\"</code>, <code>\"RapidRecharge\"</code>, or <code>\"NoBoost\"</code>.</li> <li><code>rumble</code> - Rumble item rules. Either <code>\"Off\"</code> (default), <code>\"DefaultRumble\"</code>, <code>\"Slow\"</code>, <code>\"Civilized\"</code>, <code>\"DestructionDerby\"</code>, <code>\"SpringLoaded\"</code>, <code>\"SpikesOnly\"</code>, <code>\"SpikeRush\"</code>, <code>\"HauntedBallBeam\"</code>, <code>\"Tactical\"</code>, <code>\"BatmanRumble\"</code>, <code>\"GrapplingOnly\"</code>, <code>\"HaymakerOnly\"</code>, <code>\"SpikeRushForce\"</code>, or <code>\"RPS\"</code>.</li> <li><code>boost_strength</code> - Boost strength multiplier. Either <code>\"One\"</code> (default), <code>\"OneAndAHalf\"</code>, <code>\"Two\"</code>, <code>\"Five\"</code>, or <code>\"Ten\"</code>.</li> <li><code>gravity</code> - Strength of gravity. Either <code>\"Default\"</code>, <code>\"Low\"</code>, <code>\"High\"</code>, <code>\"SuperHigh\"</code>, or <code>\"Reverse\"</code>.</li> <li><code>demolish</code> - Demolition conditions. Either <code>\"Default\"</code>, <code>\"Disabled\"</code>, <code>\"FriendlyFire\"</code>, <code>\"OnContact\"</code>, <code>\"OnContactFF\"</code>, <code>\"OnBallContact\"</code>, <code>\"OnBallContactSilent\"</code>, <code>\"OnBallContactFF\"</code>, or <code>\"OnBallContactFFSilent\"</code>.</li> <li><code>respawn_time</code> - Demolition respawn time. Either <code>\"ThreeSeconds\"</code> (default), <code>\"TwoSeconds\"</code>, <code>\"OneSecond\"</code>, or <code>\"DisableGoalReset\"</code>.</li> <li><code>max_time</code> - Max real-time duration of match including kickoff, replays, and more. If the score is tied upon time-out, the number of shots determine the winner. Either <code>\"Unlimited\"</code> (default) or <code>\"ElevenMinutes\"</code>.</li> <li><code>game_event</code> - Additional game behavior for custom modes. Either <code>\"Default\"</code>, <code>\"Haunted\"</code>, or <code>\"Rugby\"</code>.</li> <li><code>audio</code> - Additional audio options for custom modes. Either <code>\"Default\"</code> or <code>\"Haunted\"</code>.</li> <li><code>ball_gravity</code> - Ball gravity. Either <code>\"Default\"</code>, <code>\"Low\"</code>, <code>\"High\"</code>, or <code>\"SuperHigh\"</code>.</li> <li><code>territory</code> - Disallow players from touching the opponents side if the field. Usually combined with <code>the stale_ball</code> mutator. Either Either <code>\"Off\"</code> (default) or <code>\"Territory\"</code>.</li> <li><code>stale_ball</code> - Disallow the ball to stay on one half of the field by teleporting it to the other half after the given amount of time. Usually combined with the <code>territory</code> mutator. Either <code>\"Unlimited\"</code> (default) or <code>\"ThirtySeconds\"</code>.</li> <li><code>jump</code> - How many times you can jump and dodge/double jump. Either <code>\"Default\"</code>, <code>\"Grounded\"</code>, <code>\"Two\"</code>, <code>\"Three\"</code>, <code>\"Four\"</code>, <code>\"Unlimited\"</code>, or <code>\"NoJumps\"</code>.</li> <li><code>dodge_timer</code> - How long you can wait before dodging or double jumping. Either <code>\"OnePointTwentyFiveSeconds\"</code> (default), <code>\"TwoSeconds\"</code>, <code>\"ThreeSeconds\"</code>, or <code>\"Unlimited\"</code>.</li> <li><code>scoring_rule</code> - Whether the ball should be able to interact with goals. Either <code>\"Default\"</code> or <code>\"Disabled\"</code>.</li> <li><code>possession_score</code> - Modifies how often possession gives points. Specifically, the team that touched the ball most recently gains a point every X seconds until the other team touches the ball. Either <code>\"Off\"</code> (default), <code>\"OneSecond\"</code>, <code>\"TwoSeconds\"</code>, or <code>\"ThreeSeconds\"</code>.</li> <li><code>demolish_score</code> - Modifies how many points demolitions score. Either <code>\"Zero\"</code> (default), <code>\"One\"</code>, <code>\"Two\"</code>, or <code>\"Three\"</code>.</li> <li><code>normal_goal_score</code> - Modifies how many points a normal goal score. Either <code>\"One\"</code> (default), <code>\"Zero\"</code>, <code>\"Two\"</code>, <code>\"Three\"</code>, <code>\"Five\"</code>, or <code>\"Ten\"</code></li> <li><code>aerial_goal_score</code> - Modifies how many points aerial goals score. Either <code>\"One\"</code> (default), <code>\"Zero\"</code>, <code>\"Two\"</code>, <code>\"Three\"</code>, <code>\"Five\"</code>, or <code>\"Ten\"</code>.</li> <li><code>assist_goal_score</code> - Modifies how many points assists score. Either <code>\"Zero\"</code> (default), <code>\"One\"</code>, <code>\"Two\"</code>, or <code>\"Three\"</code>.</li> <li><code>input_restriction</code> - Restricts player inputs. Either <code>\"Default\"</code> or <code>\"Backwards\"</code>.</li> </ul> </li> </ul> <p>Car fields:</p> <ul> <li><code>team</code> - The team of the player. Either <code>\"Blue\"</code>/<code>0</code> for blue or <code>\"Orange\"</code>/<code>1</code> for orange. Default 0.</li> <li><code>type</code> - Determines what controls the car. Either <code>\"RLBot\"</code> (default), <code>\"Human\"</code>, or <code>\"Psyonix\"</code> (see <code>skill</code>), </li> <li><code>skill</code> - Determines the skill level of a Psyonix bot. Either <code>\"Beginner\"</code>, <code>\"Rookie\"</code>, <code>\"Pro\"</code>, and <code>\"Allstar\"</code>.</li> <li><code>config_file</code> - A path to a <code>bot.toml</code> config file. Unused if <code>type</code> is not <code>\"RLBot\"</code> or <code>\"Psyonix\"</code>. For Psyonix bots, the config file determines name and loadout.</li> <li><code>name</code> - Overrides the name in <code>config</code>.</li> <li><code>loadout_file</code> - Overrides the loadout in <code>config</code>.</li> <li><code>auto_start</code> - Boolean (default true). Whether the bot should be started using its run command. If false, the run command will be considered empty. See also <code>auto_start_agents</code> to disable auto-start for all bots and scripts.</li> </ul> <p>Script fields:</p> <ul> <li><code>config_file</code> - A path to a <code>script.toml</code> config file.</li> <li><code>auto_start</code> - Boolean (default true). Whether the script should be started using its run command. If false, the running will be considered empty. See also <code>auto_start_agents</code> to disable auto-start for all bots and scripts.</li> </ul> Example <code>match.toml</code> with default values + some cars and scripts <pre><code>[rlbot]\nlauncher = \"Steam\"\nauto_start_agents = true\nwait_for_agents = true\n\n[match]\ngame_mode = \"Soccar\"\ngame_map_upk = \"Stadium_P\"\nskip_replays = false\nstart_without_countdown = false\nexisting_match_behavior = \"Restart\"\nenable_rendering = false\nenable_state_setting = true\nauto_save_replay = false\nfreeplay = false\n\n[[cars]]\nconfig_file = \"atba/atba.bot.toml\"\n# The following unnessary since they are default values\nteam = 0\ntype = \"RLBot\"\nauto_start = true\n\n[[cars]]\nteam = 0\nconfig_file = \"necto/bot.toml\"\n\n[[cars]]\nteam = 1\ntype = \"Psyonix\"\nskill = \"Pro\"\n\n[[cars]]\nteam = 1\ntype = \"Human\"\n\n[[scripts]]\nconfig = \"zero-g.script.toml\"\n\n[mutators]\n# All mutators with default values\nmatch_length = \"FiveMinutes\"\nmax_score = \"Unlimited\"\nmulti_ball = \"One\"\novertime = \"Unlimited\"\ngame_speed = \"Default\"\nball_max_speed = \"Default\"\nball_type = \"Default\"\nball_weight = \"Default\"\nball_size = \"Default\"\nball_bounciness = \"Default\"\nboost_amount = \"NormalBoost\"\nrumble = \"Off\"\nboost_strength = \"One\"\ngravity = \"Default\"\ndemolish = \"Default\"\nrespawn_time = \"ThreeSeconds\"\nmax_time = \"Unlimited\"\ngame_event = \"Default\"\naudio = \"Default\"\nball_gravity = \"Default\"\nterritory = \"Off\"\nstale_ball = \"Unlimited\"\njump = \"Default\"\ndodge_timer = \"OnePointTwentyFiveSeconds\"\nscoring_rule = \"Deafult\"\npossession_score = \"Off\"\ndemolish_score = \"Zero\"\nnormal_goal_score = \"One\"\naerial_goal_score = \"One\"\nassist_goal_score = \"Zero\"\ninput_restriction = \"Default\"\n</code></pre>"},{"location":"v5/botmaking/game-data/","title":"Game Data","text":"<p>The majority of the communication between RLBot and its clients consists of GamePackets, FieldInfo, and Controllers. RLBot sends GamePackets to bots and scripts at 120 Hz. Bots repond with a Controller to control their car. FieldInfo is sent once and contains static information about the map.</p> <p>All supported languages have access to the same data, though syntax and conventions will vary. The exact data can be found in the flatbuffer schema gamedata.fbs. The schema data is well-documented and explains most game data in detail.</p>"},{"location":"v5/botmaking/game-data/#language-specific-guides","title":"Language-Specific Guides","text":"<p>V4:</p> <ul> <li>Python</li> <li>Java</li> <li>C#</li> <li>Rust</li> <li>Nim</li> </ul>"},{"location":"v5/botmaking/hiveminds/","title":"Hiveminds","text":"<p>Hiveminds are now an official part of RLBot in v5. To tell v5 that your bot is a hivemind, set <code>hivemind = true</code> under the <code>[settings]</code> header in your <code>bot.toml</code> file.</p> Example <code>bot.toml</code> for a hivemind <pre><code>[settings]\nname = \"Hives\"\nloadout_file = \"loadout.toml\"\nrun_command = \"python bot.py\"\nrun_command_linux = \"./venv/bin/python bot.py\"\nagent_id = \"rlbot-community/hives\"\n# must set to true if you want the bot to be ran as a hivemind\nhivemind = true\n\n[details]\ndescription = \"Made possible by RLBot\"\nfun_fact = \"This is a test bot\"\nsource_link = \"https://github.com/RLBot/core\"\ndeveloper = \"RLBot community\"\ntags = []\n</code></pre> <p>See Config Files for details on the <code>bot.toml</code> file.</p>"},{"location":"v5/botmaking/hiveminds/#what-is-a-hivemind","title":"What is a hivemind?","text":"<p>By default, RLBot launches 1 process per bot. This is fine for most bots, but it can be inefficient for bots that are designed to work together. Hiveminds fix this by assigning all bots of the same type to the same process, if they're on the same team. This means that the same bot on different teams will still be controlled different processes.</p> <p>Basically, a hivemind is 1 process that controls multiple bots!</p> <p>How RLBot groups bots into hiveminds</p> <p>RLBot specifically uses <code>agent_id</code>s to group bots together, which is why it's important that your bot's <code>agent_id</code> is unique!</p>"},{"location":"v5/botmaking/hiveminds/#types-of-hiveminds","title":"Types of hiveminds","text":"<p>There are 2 common ways to implement a hivemind:</p> <ol> <li>Single-threaded hivemind: The hivemind runs on a single thread, and each bot is controlled sequentially. This is the simplest way to implement a hivemind.</li> <li> <p>Multithreaded hivemind: The hivemind runs on multiple threads, and each bot is controlled concurrently. This is more complex, but can be more efficient.</p> Multithreaded hiveminds are not supported in Python <p>Due to current limitations of the Python language, Python can't do multithreading. If you're curious why, learn more about the Global Interpreter Lock!</p> </li> </ol>"},{"location":"v5/botmaking/hiveminds/#language-specific-examples","title":"Language-specific examples","text":"<ul> <li>Python</li> <li>Rust</li> <li>C++</li> </ul>"},{"location":"v5/botmaking/manipulating-game-state/","title":"Manipulating Game States","text":"<p>It is possible to set many game state values, for instance positions and velocities for the cars and ball. It is commonly referred to as state setting.</p> <p>State setting is disabled during most tournaments, but it's very useful when developing and debugging your bot.</p> <p>This is how you enabled state setting:</p> <ul> <li>In the GUI: Open the Extra menu and tick \"Enable State Setting\".</li> <li>In a match config: Set <code>enable_state_setting</code> to <code>true</code> in under the <code>[match]</code> header. See Configuration Files.</li> </ul>"},{"location":"v5/botmaking/manipulating-game-state/#possibilities","title":"Possibilities","text":"<ul> <li>Set up a specific scenario for your bot to try over and over. Better than custom training, because:<ul> <li>You have control over car orientation, velocity, angular velocity, and boost amount</li> <li>You can do it in the middle of an exhibition match with opponents</li> <li>You can control it all from inside your bot code</li> </ul> </li> <li>Record snapshots during a game and \"rewind\" if you encounter a natural situation you want to iterate on</li> <li>Hover your car in midair while you work on your orientation code</li> <li>Build wacky physics rules to change the game, e.g. making the ball bounce off invisible walls, accelerate in a certain direction, etc.   Many meme bots use state setting to create their gimmick.</li> </ul>"},{"location":"v5/botmaking/manipulating-game-state/#language-specific-documentation","title":"Language-specific documentation","text":"<ul> <li>Python</li> </ul> <p>V4:</p> <ul> <li>Python</li> <li>Java</li> <li>C#</li> </ul>"},{"location":"v5/botmaking/matchcomms/","title":"Match communication","text":"<p>MatchComms enables communication between participants in a match.</p> <p>Use cases:</p> <ul> <li>Telling your teammate where you intend to go</li> <li>Setting parameters on bots in a training exercise</li> <li>Displaying messages to humans</li> </ul>"},{"location":"v5/botmaking/matchcomms/#message-structure","title":"Message structure","text":"<p>The <code>MatchComm</code> flatbuffer defines the data in each message:</p> <ul> <li><code>index</code> - The index of the player that sent this message. For scripts, this value is the index in the match configuration instead.</li> <li><code>team</code> - The team of the player that sent this message. <code>0</code> for blue, <code>1</code> for orange and <code>2</code> for scripts.</li> <li><code>team_only</code> - <code>true</code> if this message is team-only, <code>false</code> if everyone can see it. Messages marked as <code>team_only</code> will only be sent to processes with the same <code>team</code>.</li> <li><code>display</code> - The message that will be displayed on the screen in quick chat. This is intended for communication with humans. Use the <code>content</code> field for communication with bots and scripts.</li> <li><code>content</code> - The contents of the message. Use the <code>display</code> field for messages in quick chat.</li> </ul>"},{"location":"v5/botmaking/matchcomms/#language-specific-wikis","title":"Language-specific wikis","text":"<ul> <li>Python</li> </ul>"},{"location":"v5/botmaking/matchcomms/#quick-chat","title":"Quick chat","text":"<p>In RLBot v4, bots could send various preset messages using quick chat. This has been replaced by the <code>display</code> field in v5's MatchComms.</p> <p>The following v4 quick chats map to these messages in v5:</p> <ul> <li><code>Information_IGotIt = \"I got it!\"</code></li> <li><code>Information_NeedBoost = \"Need Boost!\"</code></li> <li><code>Information_TakeTheShot = \"Take the shot!\"</code></li> <li><code>Information_Defending = \"Defending...\"</code></li> <li><code>Information_GoForIt = \"Go for it!\"</code></li> <li><code>Information_Centering = \"Centering!\"</code></li> <li><code>Information_AllYours = \"All yours.\"</code></li> <li><code>Information_InPosition = \"In position.\"</code></li> <li><code>Information_Incoming = \"Incoming!\"</code></li> <li><code>Compliments_NiceShot = \"Nice shot!\"</code></li> <li><code>Compliments_GreatPass = \"Great pass!\"</code></li> <li><code>Compliments_Thanks = \"Thanks!\"</code></li> <li><code>Compliments_WhatASave = \"What a save!\"</code></li> <li><code>Compliments_NiceOne = \"Nice one!\"</code></li> <li><code>Compliments_WhatAPlay = \"What a play!\"</code></li> <li><code>Compliments_GreatClear = \"Great clear!\"</code></li> <li><code>Compliments_NiceBlock = \"Nice block!\"</code></li> <li><code>Reactions_OMG = \"OMG!\"</code></li> <li><code>Reactions_Noooo = \"Noooo!\"</code></li> <li><code>Reactions_Wow = \"Wow!\"</code></li> <li><code>Reactions_CloseOne = \"Close one!\"</code></li> <li><code>Reactions_NoWay = \"No way!\"</code></li> <li><code>Reactions_HolyCow = \"Holy cow!\"</code></li> <li><code>Reactions_Whew = \"Whew.\"</code></li> <li><code>Reactions_Siiiick = \"Siiiick!\"</code></li> <li><code>Reactions_Calculated = \"Calculated.\"</code></li> <li><code>Reactions_Savage = \"Savage!\"</code></li> <li><code>Reactions_Okay = \"Okay.\"</code></li> <li><code>Apologies_Cursing = \"$#@%!\"</code></li> <li><code>Apologies_NoProblem = \"No problem.\"</code></li> <li><code>Apologies_Whoops = \"Whoops...\"</code></li> <li><code>Apologies_Sorry = \"Sorry!\"</code></li> <li><code>Apologies_MyBad = \"My bad...\"</code></li> <li><code>Apologies_Oops = \"Oops!\"</code></li> <li><code>Apologies_MyFault = \"My fault.\"</code></li> <li><code>PostGame_Gg = \"gg\"</code></li> <li><code>PostGame_WellPlayed = \"Well played.\"</code></li> <li><code>PostGame_ThatWasFun = \"That was fun!\"</code></li> <li><code>PostGame_Rematch = \"Rematch!\"</code></li> <li><code>PostGame_OneMoreGame = \"One. More. Game.\"</code></li> <li><code>PostGame_WhatAGame = \"What a game!\"</code></li> <li><code>PostGame_NiceMoves = \"Nice moves.\"</code></li> <li><code>PostGame_EverybodyDance = \"Everybody dance!\"</code></li> <li><code>Custom_Toxic_WasteCPU = \"Waste of CPU cycles\"</code></li> <li><code>Custom_Toxic_GitGut = \"git gud\"</code></li> <li><code>Custom_Toxic_DeAlloc = \"De-Allocate Yourself\"</code></li> <li><code>Custom_Toxic_404NoSkill = \"404: Your skill not found\"</code></li> <li><code>Custom_Toxic_CatchVirus = \"Get a virus\"</code></li> <li><code>Custom_Useful_Passing = \"Passing!\"</code></li> <li><code>Custom_Useful_Faking = \"Faking\"</code></li> <li><code>Custom_Useful_Demoing = \"Demoing!\"</code></li> <li><code>Custom_Useful_Bumping = \"BOOPING\"</code></li> <li><code>Custom_Compliments_TinyChances = \"The chances of that was 47525 to 1\"</code></li> <li><code>Custom_Compliments_SkillLevel = \"Who upped your skill level?\"</code></li> <li><code>Custom_Compliments_proud = \"Your programmer should be proud\"</code></li> <li><code>Custom_Compliments_GC = \"You're the GC of Bots\"</code></li> <li><code>Custom_Compliments_Pro = \"Are you &lt;Insert Pro&gt;Bot?\"</code></li> <li><code>Custom_Excuses_Lag = \"Lag\"</code></li> <li><code>Custom_Excuses_GhostInputs = \"Ghost inputs\"</code></li> <li><code>Custom_Excuses_Rigged = \"RIGGED\"</code></li> <li><code>Custom_Toxic_MafiaPlays = \"Mafia plays!\"</code></li> <li><code>Custom_Exclamation_Yeet = \"Yeet!\"</code></li> </ul>"},{"location":"v5/botmaking/rendering/","title":"Rendering","text":"<p>Rendering allows you to draw objects on screen, which can make debugging and testing your bot so much easier. For example, you could draw the predicted ball path, or draw where the bot wants to go.</p>"},{"location":"v5/botmaking/rendering/#enabling-disabling-rendering","title":"Enabling &amp; disabling rendering","text":"<p>When installing the RLBotGUI, rendering will be disabled by default. You can turn it on by clicking 'Extra' and ticking 'Enable Rendering' in the GUI.</p> <p>RLBot v5 doesn't have any keybinds to toggle rendering mid-match. Mid-match render toggling is a todo item as we figure out the best way to do this.</p>"},{"location":"v5/botmaking/rendering/#render-anchors","title":"Render anchors","text":"<p>A RenderAnchor is a point in space consisting of either or both of a world component and optionally a relative component:</p> <ul> <li>The world component is a fixed point in global coordinates.</li> <li> <p>The relative component is given by a car or ball and includes a local offset that takes the position and orientation of the object into account. The render will stay attached to the object they are associated with and do not have to be updated each tick.</p> <p>Render anchors and object destruction</p> <p>Renders that use a render anchor attached to an object will disappear if the object is destroyed (i.e. the car is demolished or the ball is scored). Make sure to handle this in your rendering logic!</p> </li> </ul>"},{"location":"v5/botmaking/rendering/#combining-world-and-relative-components","title":"Combining world and relative components","text":"<p>By combining a world component and a relative component, you can, for example, attach a render to a car with the relative component, but also specify a world component to offset that render by <code>z=-50</code> from the car's position.</p> <p>This will position the render underneath the car, with the render moving relative to the position but not the orientation of the car.</p>"},{"location":"v5/botmaking/rendering/#render-types","title":"Render types","text":"<ul> <li>Line3D - Draws a line between 2 points in 3D space.</li> <li> <p>PolyLine3D - Draws a continuous line through a series of 3D points. World coordinates only.</p> PolyLine3D is more efficient than Line3D for a series of lines <p>This is the recommended way to draw a large number of points in a continuous line, as it is more efficient than sending multiple <code>Line3D</code> messages. While this method was available in RLBot v4, it was implemented by sending a series of <code>Line3D</code> messages which defeated the purpose.</p> </li> <li> <p>String2D - Draws a string in 2D space (screen space).</p> </li> <li>String3D - Draws a billboard string in 3D space.</li> <li>Rect2D - Draws a rectangle in 2D space (screen space).</li> <li>Rect3D - Draws a billboard rectangle in 3D space.</li> </ul>"},{"location":"v5/botmaking/rendering/#coordinates-and-sizes","title":"Coordinates and sizes","text":"<ul> <li>All 2D rendering uses screen space coordinates in the 0..1 range, such that <code>x=0</code> is left side of the screen and <code>x=1</code> is the right side of the screen, <code>y=0</code> is top, and <code>y=1</code> is bottom.</li> <li>It is not possible to change the width of lines.</li> <li>3D strings, rectangles, and lines do not change size as they get further away from the camera.</li> <li>The default font is monospaced and characters are 10x20 pixels for both 2D and 3D rendering. As a consequence, it is not possible to position text nicely in 2D without assuming a certain resolution.</li> </ul>"},{"location":"v5/botmaking/rendering/#rendering-a-large-amount","title":"Rendering a large amount","text":"<p>If you try rendering a lot of things at once, you will start to notice this message: <code>Too many bytes sent this tick, skipping message</code></p> <p>There are a few ways to get around this.</p> <ol> <li>Reduce the amount of things you are rendering.     This is the most straightforward way to reduce the amount of bytes sent.     For instance, instead of rendering all 720 ball prediction slices, try rendering every 4th slice.</li> <li>Use <code>PolyLine3D</code>.     This method is more efficient than many Line3Ds if you are drawing a continuous line.</li> <li>Avoid drawing every frame.     If you only need to draw something once, don't draw it every frame.     When calling <code>start_rendering</code>, you can pass in a <code>group_id</code> string.     By default, the group id is just <code>\"default\"</code>.     Old renders are only cleared when a new render with the same group id is sent.     Using this, you can send parts of your render every frame, and that render will persist until the match ends (or a new render from the same process gets sent with the same group id).</li> </ol> <p>If you absolutely have to re-render a lot of items every frame, you're out of luck.</p>"},{"location":"v5/botmaking/rendering/#language-specific-examples","title":"Language-specific examples","text":"<ul> <li>Python</li> </ul>"},{"location":"v5/botmaking/scripts/","title":"Scripts","text":"<p>Sometimes it can be useful to have access to game values, debug rendering, or state setting while not being a bot playing within the match. RLBot has an easy solution for that - scripts!</p> <p>Just like how bots are defined by a <code>bot.toml</code>, scripts are defined by a <code>script.toml</code>, and the content is very similar.</p> Example <code>script.toml</code> file <pre><code>[settings]\nagent_id = \"rlbot-community/script\"\nname = \"My script\"\nrun_command = \"python script.py\"\nrun_command_linux = \"./venv/bin/python script.py\"\n\n[details]\ndescription = \"Made possible by RLBot\"\nfun_fact = \"This is a test script\"\nsource_link = \"https://github.com/RLBot/RLBot\"\ndeveloper = \"RLBot community\"\nlanguage = \"Python\"\ntags = []\n</code></pre> <p>See Config Files for details on the <code>script.toml</code> file.</p>"},{"location":"v5/botmaking/scripts/#language-specific-examples","title":"Language-specific examples","text":"<ul> <li>Python</li> <li>Rust</li> <li>C#</li> </ul>"},{"location":"v5/botmaking/tick-rate/","title":"Tick rate","text":"<p>Bots have a function like <code>get_output(packet)</code> or something similar, depending on the language. This gets called some number of times per second, and this is referred to as the tick rate.</p> <p>There are several factors that influence tick rate:</p> <ol> <li>The frame rate of Rocket League. If Rocket League is running at 60 FPS,    the tick rate will get capped at 60, regardless of any other settings. Note that enabled VSync also limits FPS.</li> <li>The tick rate can never be higher than 120, since this is the rate at which Rocket League simulates its physics.</li> </ol> <p>In other words, the tick rate is <code>min(rocketLeagueFPS, 120)</code>.</p> <p>If you ever see a performance monitor pop up in-game on the left-hand side and it says anything other than <code>RLBot: 100%</code> then RLBot is missing ticks due to a low or inconsistent frame rate. If any individual bot shows less than 100%, then only that bot is missing ticks because its logic is running too slowly.</p>"},{"location":"v5/botmaking/tmcp/","title":"TMCP","text":"<p>TMCP stands for the Team Match Communication Protocol. It is an attempt at standardizing inter-bot communication over the match communications system, or \"match comms\" for short. See MatchComms for more information on how to use it.</p> <p>Specifically, TMCP puts a protocol on the <code>content</code> byte string of MatchComm messages using JSON.</p> <p>The Python-specific wiki has an example for encoding Python objects to JSON and then bytes and back without erroring on inavalid JSON from other bots.</p>"},{"location":"v5/botmaking/tmcp/#sending-packets","title":"Sending packets","text":"<p>Bots should avoid spamming packets. They should aim for a maximum of 10 packets per second.</p> <p>Only send a packet when something has changed. If you want to refine a time estimate sent in a previous message, only do so if the time difference is &gt; 0.1 seconds.</p> <p>TMCP messages should only be sent to your team.</p>"},{"location":"v5/botmaking/tmcp/#receiving-packets","title":"Receiving packets","text":"<p>Packets will only be received when something has changed. If you haven't received a packet from another bot, assume that nothing has changed.</p>"},{"location":"v5/botmaking/tmcp/#tmcp-10","title":"TMCP 1.0","text":"<p>This is what a message's content looks like following TMCP:</p> <pre><code>{\n  \"tmcp_version\": [1, 0],\n  \"action\": {\n    \"type\": string,\n    ...\n  }\n}\n</code></pre> <ul> <li> <p><code>tmcp_version</code></p> <ul> <li>Major: Breaking revision number</li> <li>Minor: Non-breaking revision number</li> </ul> </li> <li> <p><code>action</code> - The current action that the bot is taking. This is an object. The types can be seen below.</p> <ul> <li><code>type</code> - A string declaring type of the action. See valid types below.</li> </ul> </li> </ul> <p>If you are sending messages from a hivemind, make sure it is sent from the <code>index</code> the bot which is carrying out the action.</p>"},{"location":"v5/botmaking/tmcp/#ball","title":"\"BALL\"","text":"<p>The bot is going for the ball.</p> <pre><code>{\n  \"type\": \"BALL\",\n  \"time\": float,\n  \"direction\": [float, float, float] \n}\n</code></pre> <ul> <li><code>time</code> - Game time that your bot will arrive at the ball. Set to <code>-1</code> if this is unknown.</li> <li><code>direction</code> - Anticipated normalized direction of ball travel AFTER contact is made. <code>[0, 0, 0]</code> for unknown.</li> </ul> <p>Suggested quick chat for the MatchComm <code>display</code>: \"I got it\"</p>"},{"location":"v5/botmaking/tmcp/#boost","title":"\"BOOST\"","text":"<p>The bot is going for boost.</p> <pre><code>{\n  \"type\": \"BOOST\",\n  \"target\": int\n}\n</code></pre> <ul> <li><code>target</code> - Index of the boost pad the bot is going to collect.</li> </ul> <p>Suggested quick chat for the MatchComm <code>display</code>: \"Need boost\"</p>"},{"location":"v5/botmaking/tmcp/#demo","title":"\"DEMO\"","text":"<p>The bot is going to demolish another car.</p> <pre><code>{\n  \"type\": \"DEMO\",\n  \"time\": float,\n  \"target\": int\n}\n</code></pre> <ul> <li><code>time</code> - Game time that the bot will demo the other bot. <code>-1</code> for unknown.</li> <li><code>target</code> - Index of the bot that will be demoed.</li> </ul> <p>Suggested quick chat for the MatchComm <code>display</code>: \"Demoing!\"</p>"},{"location":"v5/botmaking/tmcp/#ready","title":"\"READY\"","text":"<p>The bot is waiting for a chance to go for the ball. Some examples are positioning (retreating/shadowing) and recovering.</p> <pre><code>{\n  \"type\": \"READY\",\n  \"time\": float\n}\n</code></pre> <ul> <li><code>time</code> - The game time when the bot could arrive at the ball (if it was to go for it). <code>-1</code> for unknown.</li> </ul> <p>Suggested quick chat for the MatchComm <code>display</code>: \"Ready\"</p>"},{"location":"v5/botmaking/tmcp/#defend","title":"\"DEFEND\"","text":"<p>The bot is in a position to defend the goal and is not planning to move up. Only use DEFEND if your bot is in place to defend, not if still en-route. If the bot decides to leave the net, signal this using either \"BALL\" (if going for a touch) or \"READY\" (if moving upfield).</p> <p>A bot should use \"DEFEND\" to let its teammates know it is safe to move up a bit without worrying about an open net.</p> <pre><code>{\n  \"type\": \"DEFEND\"\n}\n</code></pre> <p>Suggested quick chat for the MatchComm <code>display</code>: \"Defending\"</p>"},{"location":"v5/community/rlbot-pack/","title":"RLBot Pack","text":"<p>The RLBotPack is a repository holding frequently requested bots in one convenient place. The main intended users are people joining the discord looking for a fun bot to try out. It may also be useful as a way for people running streams to get an up-to-date version of your bot.</p> <p>The details for the v5 botpack are still a WIP. However, there are somethings we know for sure:</p> <ul> <li>All bots and scripts will be required to compile into a single executable file</li> <li>Source code will be submitted to a central repository where a trusted, automated system will build and publish it</li> </ul>"},{"location":"v5/community/story-mode/","title":"Story Mode","text":"<p>Story Mode in v5</p> <p>RLBot Story Mode for v5 is planned, but will not be finished until after the beta has ended. See Overview of v5 for updates.</p> <p>Story Mode is a custom single player campaign where you play with and against stronger and stronger bots. You will be unlocking regions, recruiting team mates, and buying upgrades. Story Mode is available in the RLBotGUI (for v4).</p>"},{"location":"v5/framework/architecture/","title":"Architecture","text":"<p>This is the basic overview of RLBot in use.</p> <p></p> <p>Matches are typically started by RLBotGUI, CleoPetra, or some other match orchestrator. The match orchestrator may start up the RLBotServer, if needed. Once the RLBotServer receives a MatchConfiguration, it will start up Rocket League with the <code>-rlbot</code> flag (if needed) and then the bot and script processes. RLBotServer communicates with Rocket League through the official Psyonix API. Since the API is under NDA, a closed-source Bridge.dll hide the details of the API. On startup bots and scripts connect to the RLBotServer and are briefed about the match, their index, and more. Once the match is loaded, RLBotServer will send live game data to all connected clients, and optionally ball prediction and match comms. Each bot client control their car(s) by responding to each GamePacket with PlayerInput. To ease the implementation of bots, scripts, and match orchestrators, we provide interface libraries for various languages.</p> <p>All client connections use TCP sockets. See the socket protocol specification for more details.</p> <p>Compiled clients</p> <p>A bot/script does not have to be compiled to interact with RLBot. However, bots distributed in the RLBotPack is typically compiled, so users can avoid installing various dependencies.</p>"},{"location":"v5/framework/architecture/#core","title":"Core","text":"<p>A detailed depiction of the architecture of the RLBotServer including the communication with a client is seen below.</p> <p></p>"},{"location":"v5/framework/console-commands/","title":"Console commands","text":""},{"location":"v5/framework/console-commands/#sending-a-console-command","title":"Sending a Console Command","text":"<p>To send a console command, e.g. <code>Stat FPS</code>, you would do this in Python:</p> <pre><code>self.set_game_state(console_commands=[\"Stat FPS\"])\n</code></pre> <p>Other languages may vary in how you set game state.</p>"},{"location":"v5/framework/console-commands/#known-console-commands","title":"Known Console Commands","text":"<p>All of these are confirmed to work as intended. Please add more as you find them!</p> <ul> <li><code>QueSaveReplay</code> - Creates a replay keyframe and causes a replay to be saved at the end of the match.</li> <li><code>Set WorldInfo WorldGravityZ 0.0000001</code> - Zero gravity (pretty much). Setting to 0 returns it to default.   You can also use state setting to set gravity.   Warning: Sending this command every frame will likely make your game lag!</li> <li><code>Set WorldInfo TimeDilation 3</code> - Speeds up the game by 3 times. Can also be used to slow down the game   with a number between 0 and 1. You can also use state setting   to set game speed.</li> <li><code>Stat FPS</code> - Turns on a little in-game FPS counter. Can be turned back off with <code>Stat FPS 0</code></li> <li><code>ShowDebug PHYSICS</code> - Nice little text readout which shows you some values, and also the names of some   specific classes/attributes that you can use <code>Set</code> on.</li> <li><code>Pause</code> - Pauses the game. Send <code>Pause</code> to unpause the game. <code>get_output</code>/<code>GetOutput</code>/<code>getOutput</code> will   still be called when the game is paused. This pause is the same as the pause when Escape is pressed.</li> <li><code>ViewAutoCam</code> - This will set the camera to auto-cam mode.</li> <li><code>ViewDefault</code> - Go to the default director camera mode.</li> <li><code>ViewPlayer &lt;team index&gt; &lt;player index&gt;</code> To go a specific player POV - e.x. <code>ViewPlayer 0 2</code> to view   the third player on blue and <code>ViewPlayer 1 2</code> to view the third player on orange.</li> <li><code>CycleHUD</code> - The equivalent of pressing <code>H</code> to cycle through the HUD options.</li> <li><code>CycleCamera</code> - Goes to the next camera view. For example, <code>ViewAutoCam</code> and then <code>CycleCamera</code> puts the   camera into the free-flying mode.</li> </ul>"},{"location":"v5/framework/console-commands/#research-for-more-console-commands","title":"Research for More Console Commands","text":"<p>Try some of these!</p> <p>https://www.reddit.com/r/RocketLeagueMods/comments/4vuj0h/list_of_available_console_commands/</p>"},{"location":"v5/framework/operating-system-support/","title":"Operating system support","text":""},{"location":"v5/framework/operating-system-support/#windows","title":"Windows","text":"<p>RLBot can launch Rocket League through Steam or Epic Game Store.</p>"},{"location":"v5/framework/operating-system-support/#linux","title":"Linux","text":"<p>RLBot currently supports either Rocket League running under Proton on Steam or Rocket League installed from the Epic Games Store via Legendary and Heroic.</p>"},{"location":"v5/framework/operating-system-support/#mac","title":"Mac","text":"<p>Native MacOS support has been dropped. It's recommended to run both Rocket League and RLBot under a virtual machine running Windows or Linux.</p>"},{"location":"v5/framework/remote-rlbot/","title":"Remote RLBot","text":"<p>Automatically starting bots</p> <p>RLBot can't automatically start bots or scripts on remote machines. You will need to start them manually, using custom software. For this process to work as intended, you should still have <code>auto_start_bots</code> set to <code>false</code> in RLBot because even though you might be starting the processes automatically, RLBot itself is not. </p> <p>RLBot, by default, listens for TCP connections on <code>0.0.0.0</code> (all interfaces) on port <code>23234</code>. This port can be changed by launching RLBot and specifying a different port for the first argument. For example, to have RLBot listen on port <code>12345</code> instead, you would run <code>RLBotServer.exe 12345</code>.</p> <p>This means that external processes can connect to RLBot from other machines on the same network by specifying the IP address of the machine running RLBot and the port number RLBot is listening on.</p> <p>Bots and scripts using RLBot-standard compliant interfaces will read the environment variables <code>RLBOT_SERVER_IP</code> and <code>RLBOT_SERVER_PORT</code>, which default to <code>127.0.0.1</code> and <code>23234</code> respectively. You can override these environment variables to point to a different machine running RLBot. They will also expect the environment variable <code>RLBOT_AGENT_ID</code> to be set, which can be found by reading the <code>agent_id</code> field in <code>[settings]</code> header of the corresponding config toml file.</p>"},{"location":"v5/framework/sockets-specification/","title":"RLBotServer API Specification","text":"<p>The root of the specification is the file <code>rlbot.fbs</code>.</p>"},{"location":"v5/framework/sockets-specification/#packet-types","title":"Packet types","text":"<p>Packet types are named from the POV of the sender.</p> <ul> <li>InterfacePacket - Wraps <code>InterfaceMessage</code>, a union of all valid message types that can be sent by interfaces, to RLBotServer.</li> <li>CorePacket - Wraps <code>CoreMessage</code>, a union of all valid message types that can be sent by RLBotServer, to interfaces.</li> </ul> What is an interface? What is core? <ul> <li>\"Interface\" refers to the layer of abstraction that sits in between the RLBotServer API and the bot/script someone wants to make. While not strictly required, a good interface makes working with RLBot fun &amp; easy - even without knowing anything about TCP, FlatBuffers, or the RLBotServer API.</li> <li>\"Core\" refers to RLBotServer itself, which is considered the shared \"core\" of RLBot that implements various functions related to starting and running matches that are accessable via the RLBotServer API.</li> </ul>"},{"location":"v5/framework/sockets-specification/#connecting-to-rlbotserver","title":"Connecting to RLBotServer","text":"<ol> <li>Read the environment variable <code>RLBOT_SERVER_IP</code> and default to <code>127.0.0.1</code></li> <li>Read the environment variable <code>RLBOT_SERVER_PORT</code> and default to <code>23234</code></li> <li>Connect to the given IP/port via TCP.</li> </ol>"},{"location":"v5/framework/sockets-specification/#packet-format","title":"Packet format","text":"<p>This project uses FlatBuffers as the data format, prefixed with a 16-bit unsigned integer. All packets should be big endian.</p> <ul> <li>Read the first 16 bits as an unsigned integer. This is <code>n</code>, the length of the flatbuffer in bytes.</li> <li>Read <code>n</code> bytes, and deserialize this into the correct flatbuffer according to the data type.</li> </ul> <p>Replace \"read\" with \"write\" to send a packet.</p>"},{"location":"v5/framework/sockets-specification/#connection-handshake","title":"Connection handshake","text":"<p>After connecting to RLBotServer via TCP, bots and scripts must perform a handshake to get access to game data. If this is not performed, then various functionality will be limited, for example, all player inputs will be rejected by the server.</p> <ol> <li>Send <code>InterfaceMessage.ConnectionSettings</code><ul> <li>The environment variable <code>RLBOT_AGENT_ID</code> will be set by RLBotServer before launching your process. This can be passed as <code>AgentId</code>, or a hardcoded default can be used if the environment variable was not present. A hardcoded default is useful during development when the process may be getting started manually.</li> <li>For bots &amp; scripts, <code>CloseBetweenMatches</code> should always be <code>true</code> with no alternate option.</li> </ul> </li> <li>Receive match information - In no guaranteed order, wait for all of the following to arrive:<ul> <li><code>CoreMessage.MatchConfiguration</code></li> <li><code>CoreMessage.FieldInfo</code></li> <li><code>CoreMessage.ControllableTeamInfo</code> - sent for bots &amp; scripts. If <code>AgentId</code> was invalid or blank, this will be empty. If this was intentional, continue as normal.</li> </ul> </li> <li>Parse <code>CoreMessage.ControllableTeamInfo</code> for your <code>team</code>, <code>index</code>(s), and <code>spawnId</code>(s).   There will be multiple if this is a bot that was designated as a hivemind.<ul> <li>If <code>team</code> is <code>0</code> or <code>1</code>: <code>index</code> will be the index of your bot in <code>CoreMessage.GamePacket</code></li> <li>If <code>team</code> is <code>2</code>: <code>index</code> will be the index of your script in <code>CoreMessage.MatchConfiguration</code></li> </ul> </li> <li><code>identifier</code> can be used to find your bot/scripts's name in <code>MatchConfiguration</code>.<ul> <li>For bots and scripts, <code>identifier</code> corresponds to <code>playerId</code>/<code>scriptId</code> (respectively).</li> <li>DO NOT USE <code>index</code> FOR BOTS, they are not in the correct order in <code>MatchConfiguration</code>. Using <code>index</code> is ok for scripts but <code>identifier</code> can be used for both.</li> </ul> </li> <li>Perform heavy initialization.<ul> <li>At this point, most information needed for bots to initialize most of their variables is known. Have some kind of callback that lets developers do this now. Delaying the creation of the bot object/class until now is also an idea. RLBotServer will load the map during this time, but won't start the match.</li> </ul> </li> <li>Send <code>InterfaceMessage.InitComplete</code>.   This is a packet with no content, and signifies to RLBotServer that the match can be started.</li> <li>Done, enter main control loop</li> </ol>"},{"location":"v5/framework/sockets-specification/#main-control-loop","title":"Main control loop","text":"<p>Requires the connection handshake to have been performed first. Depending on what was sent in <code>ConnectionSettings</code>, some of the following packets may not be sent.</p> <ul> <li>Every tick, <code>BallPrediction</code> will always be sent before <code>GamePacket</code>.</li> <li>If <code>BallPrediction</code> is not sent, it's because it was disabled in <code>ConnectionSettings</code></li> <li><code>MatchComm</code> will arrive in between ticks. The sending of these packets can be disabled in <code>ConnectionSettings</code></li> </ul>"},{"location":"v5/framework/supported-languages/","title":"Supported Languages","text":"<p>RLBot is a server and bots can therefore be created in any language that supports sockets and flatbuffers.</p> <p>To ease development of bots and other common use cases, we have created language interface frameworks that provide handling of the communication with RLBot.</p> <p>The following list of language interfaces are supported by core developers of the RLBot framework, or have reached a very high level of documentation and support from the community. They are featured on rlbot.org.</p> <ul> <li>RLBot/Python<ul> <li>Video</li> <li>Migration details</li> </ul> </li> <li>RLBot/C#</li> <li>RLBot/Go</li> <li>RLBot/Rust</li> <li>RLBot/C++</li> </ul>"},{"location":"v5/framework/supported-languages/#adding-support-for-a-new-language","title":"Adding Support for a New Language","text":"<p>The new language must support sockets and flatbuffers.</p> <p>The protocol is described in the Socket Specification.</p> <p>The flatbuffer schema can be generated by Git submoduling RLBot/flatbuffers-schema and invoking the <code>flatc</code> binary.</p>"},{"location":"v5/framework/v5/","title":"RLBot v5 (Beta) Overview","text":"<p>RLBot v5 is the next major version of the RLBot framework bringing a host of reliability improvements and some new features to the table.</p> <p>RLBot v5 is now in beta. In this beta period we will fix bugs, incorporate feedback, and potentially make minor breaking changes. However, RLBot v5 is now about feature-complete and people can start adopting it. Note that the various language interfaces are currently in development and may be unstable.</p> <p>Getting started</p> <p>The GUI, RLBotServer, a developer-focused quick-start video, as well as links to the language interfaces can be found at the WIP front-page of RLBot v5.</p> <p>Any updates to RLBot v5 beta and the language interfaces will be announced in the RLBot Discord #annoucements channel.</p> <ul> <li>If you find bugs, please report them on Github.</li> <li>If you run into issues with v5, you can find help on Discord, either in the appropriate language channel or in the #framework-dev channel.   There is also a \"v5\" tag in #rlbot-help.</li> <li>If you have feedback/request for v5, please let us know on Github in the #framework-dev channel.</li> </ul> <p>In the remainder of this document we will cover:</p> <ul> <li>Our reasoning for creating v5 and an overview of its architecture GOTO</li> <li>A list of features completed/reworked/todo/removed in v5 (beta) GOTO</li> <li>A guide on breaking changes and how to transition from v4 to v5 GOTO</li> <li>Links to v5 language interfaces and more GOTO</li> </ul>"},{"location":"v5/framework/v5/#why-v5","title":"Why v5?","text":"<p>RLBot v4 has been incredibly user-friendly, feature rich, and stable. It was made in 2018 when RLBot was still using DLL injection. Later, in 2019, the collaboration with Psyonix and the official API were introduced. Since then, there have only been minor changes and new features, which proves how well-designed v4 was. In fact, v5 is not that different from v4. It is primarily a rewrite and an opportunity fix the flaws of v4 that have been revealed over the years. So here are the main reasons we made v5:</p> <ul> <li>The closed-source part of v4 is doing more than just communication with the Psyonix API.   This has long prevented the community from fixing certain bugs themselves.   Therefore we are extracting that functionality into the open-source part of RLBot, making the closed-source part exclusively about communication with the API.</li> <li>The closed-source part of v4 is written in C++.   By rewritting the backend of RLBot in C# we hope that more people feel comfortable contributing to it.</li> <li>No more DLLs. You may not be aware, but most bots still uses a DLL to communicate directly to the RLBot backend.   In v5, the transition to web sockets is finally complete and this allows the bot interfaces to be improved (e.g. Python type hints are not a hack anymore).</li> <li>All languages can start matches in v4, but the logic for launching of Rocket League and bots was only implemented in Python (and partially Rust).   This discouraged people from writing match starters (GUI, autoleague, etc) in other languages than Python (even CleoPetra written in Java uses a Python process to start matches).   Therefore we are moving this logic to the backend for v5 such that more languages can benefit from it.</li> <li>We are releasing ourselves from design choices made under restrictions of the DLL injection.</li> <li>The Psyonix API made a few extra features available to us, but we never integrated them in v4. They are integrated in v5.</li> <li>Python is very slow. The rewrite in C# has made this clear.</li> <li>The <code>.cfg</code> file format has no standard. We are changing to the similar <code>.toml</code> format.</li> </ul> <p>So while the changes to the functionality and interface are minor, the architecture and the framework's internal code is very different. We hope these changes will make it enjoyable to work with and contribute to RLBot moving forward.</p>"},{"location":"v5/framework/v5/#features-of-v5","title":"Features of v5","text":"<p>[Legend: \u2705=done, \ud83d\udfe8=todo, \u2728=new, \ud83d\udee0=reworked/changed, \u26d4=removed]</p> <ul> <li>\u2705\ud83d\udee0 First-class Windows &amp; Linux support<ul> <li>No current plans for MacOS, as there's no way to run Rocket League without a full VM</li> </ul> </li> <li>\u2705\ud83d\udee0 All bots connect to core directly via the sockets flatbuffer spec<ul> <li>As a consequence, adding new language support is much easier - if your language can write/read a TCP socket, it's possible! Bonus points if your language is one of the 14 that are currently supported by FlatBuffers</li> </ul> </li> <li>\u2705\ud83d\udee0 Any language can still start/stop/manage a match, but the logic for launching Rocket League and bots are now in RLBotServer.</li> <li>\u2705\ud83d\udee0 All configs files now use the standard <code>toml</code> format.     Example: necto/bot.toml</li> <li>\u2705 Hiveminds</li> <li>\u2705 Scripts</li> <li>\u2705\ud83d\udee0 The bot configuration's <code>python_file</code> has been replaced with <code>run_command</code> and <code>run_command_linux</code><ul> <li>\ud83d\udfe8 On Linux, if <code>run_command_linux</code> isn't specified, v5 will attempt to run <code>run_command</code> under Wine</li> </ul> </li> <li>\u2705\u2728 Multi-ball support for when there's more/less than 1 ball in a game</li> <li>\u2705\u2728 New mutator options<ul> <li>A Knockout match can be started</li> <li>Start with one, two, four, or six balls</li> <li>Max 7 goals</li> <li>Beach ball, anniversary ball, spooky cube, or the haunted dropshot ball</li> <li>Curve ball or beach ball curve</li> <li>Medium ball size</li> <li>Reverse gravity</li> <li>Tactical rumble (fyi we still can't read rumble items)</li> <li>Boost strength 5x</li> <li>Max time 11 minutes</li> </ul> </li> <li>\u2705\u2728 Freeplay matches. Useful if you want to use the Rocket League's freeplay-exclusive features</li> <li>\u2705 Rendering<ul> <li>\u26d4 Keyboard shortcuts to toggle rendering. We plan to have buttons in the GUI instead!</li> <li>\u2705\u2728 Rendering can be toggled for individual bots</li> <li>\u2705\u2728 New <code>RenderAnchor</code>s. Attach your rendering to the location and rotation of a car or ball plus both an absolute and local offset. No re-rendering is required and it is smooth. Example: video posted on Discord</li> </ul> </li> <li>\u2705 Game state manipulation (aka state setting)</li> <li>\u2705 Updated ball prediction algorithm for better accuracy in all game modes that use a ball</li> <li>\u2705\u2728 Support for Psyonix Beginner bots</li> <li>\u2705\u2728 More customizable Psyonix bots</li> <li>\u2705\u2728 Override a bot name/loadout (without editing the bot configuration)<ul> <li>Use cases include: Spawning specific Psyonix bots or give Nexto your in-game name to troll friends</li> </ul> </li> <li>\u2705\ud83d\udee0 Generated loadouts are now created by your bot instead of a separated loadout generator script</li> <li>\u2705\u2728 Hot-swap your bot's loadout. Respawn your bot's car with a different loadout on command without     restarting the match or interfering with the other bots<ul> <li>Only enabled when state setting is also enabled</li> </ul> </li> <li>\u2705\u2728 New data in <code>GamePacket</code> for every player:<ul> <li>Last known player input</li> <li><code>has_double_jumped</code> and <code>has_dodged</code> are now separately tracked fields</li> <li>If the player was the last player to be spectated in the match</li> <li>Player accolades. A list of small awards/events by the player, e.g. EpicSave, Demolition, PoolShot, LowFive, etc. See full list here)</li> </ul> </li> <li>\u2705\ud83d\udee0 Match comms and quick chat have been combined into just <code>MatchComm</code>s with an optional quick chat     message such that both bots and humans can understand what is meant<ul> <li>\u26d4 Quick chat messages are no longer restricted to a set of hardcoded options</li> <li>\u2705\ud83d\udee0 The <code>team_only</code> filtering finally works. No more spying on enemy chats</li> </ul> </li> <li>\u2705\ud83d\udee0 RLBot waits for all processes to fully boot before letting the match start</li> <li>\u2705 Performance metrics (i.e. missed responses by bots)<ul> <li>\u26d4 Keyboard shortcuts to toggle the performance graph. We plan to have buttons in the GUI instead! Currently, the performance percentages will be shown anytime either RLBot itself or a bot is running below 100%.</li> </ul> </li> <li>\u26d4 Non-standard Tick Rates (standard is 120hz)<ul> <li>All bots are now expected to run at 120hz. If you need more time to process inputs, it's advisable to engineer your bot around this by, for example, using an extra asynchronous thread running complex algorithms.</li> </ul> </li> <li>\u26d4 DropshotTileInfo<ul> <li>This functionality was lost with the introduction of the Psyonix API and is removed v5. But it might return.</li> </ul> </li> </ul> <p>On top of all that, the framework is also simply significantly faster.</p>"},{"location":"v5/framework/v5/#breaking-changes-migration","title":"Breaking Changes / Migration","text":"<p>The migration guide for the Python interface gives a good overview of the breaking changes and what to do instead so we refer to that: https://github.com/RLBot/python-interface/wiki/Migration</p>"},{"location":"v5/framework/v5/#links-and-resources","title":"Links and Resources","text":"<p>Below you can find links to the implementation of RLBot v5, the language interfaces, and related documentation. This wiki will also be updated as things stabilize.</p> <p>RLBot v5 framework:</p> <ul> <li>RLBotServer.exe:<ul> <li>RLBot/core</li> <li>RLBot/bridge (closed-source)</li> </ul> </li> <li>RLBot/flatbuffer-schema</li> <li>RLBot/GUI</li> </ul> <p>Language interfaces (unstable):</p> <ul> <li>RLBot/Python<ul> <li>Video</li> <li>Migration details</li> </ul> </li> <li>RLBot/C#</li> <li>RLBot/Go</li> <li>RLBot/Rust</li> <li>RLBot/C++</li> </ul>"}]}